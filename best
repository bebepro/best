local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "bebe.debug",
   LoadingTitle = "bebe.lua",
   LoadingSubtitle = "by bebeispro",
   ConfigurationSaving = {
        Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "bebeontop"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
    KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"bebeuncpro"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", nil) -- Title, Image
local Section = MainTab:CreateSection("SimplySpy")

local Button = MainTab:CreateButton({
   Name = "SimplySpy",
   Callback = function()
        --[[
    SimpleSpy v2.2 SOURCE

    Credits:
        exx - basically everything
        Frosty - GUI to Lua
]]

-- shuts down the previous instance of SimpleSpy
if _G.SimpleSpyExecuted and type(_G.SimpleSpyShutdown) == "function" then
    _G.SimpleSpyShutdown()
end

local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local Highlight = loadstring(game:HttpGet("https://github.com/exxtremestuffs/SimpleSpySource/raw/master/highlight.lua"))()

---- GENERATED (kinda sorta mostly) BY GUI to LUA ----

-- Instances:

local SimpleSpy2 = Instance.new("ScreenGui")
local Background = Instance.new("Frame")
local LeftPanel = Instance.new("Frame")
local LogList = Instance.new("ScrollingFrame")
local UIListLayout = Instance.new("UIListLayout")
local RemoteTemplate = Instance.new("Frame")
local ColorBar = Instance.new("Frame")
local Text = Instance.new("TextLabel")
local Button = Instance.new("TextButton")
local RightPanel = Instance.new("Frame")
local CodeBox = Instance.new("Frame")
local ScrollingFrame = Instance.new("ScrollingFrame")
local UIGridLayout = Instance.new("UIGridLayout")
local FunctionTemplate = Instance.new("Frame")
local ColorBar_2 = Instance.new("Frame")
local Text_2 = Instance.new("TextLabel")
local Button_2 = Instance.new("TextButton")
local TopBar = Instance.new("Frame")
local Simple = Instance.new("TextButton")
local CloseButton = Instance.new("TextButton")
local ImageLabel = Instance.new("ImageLabel")
local MaximizeButton = Instance.new("TextButton")
local ImageLabel_2 = Instance.new("ImageLabel")
local MinimizeButton = Instance.new("TextButton")
local ImageLabel_3 = Instance.new("ImageLabel")
local ToolTip = Instance.new("Frame")
local TextLabel = Instance.new("TextLabel")

--Properties:

SimpleSpy2.Name = "SimpleSpy2"
SimpleSpy2.ResetOnSpawn = false

Background.Name = "Background"
Background.Parent = SimpleSpy2
Background.BackgroundColor3 = Color3.new(1, 1, 1)
Background.BackgroundTransparency = 1
Background.Position = UDim2.new(0, 500, 0, 200)
Background.Size = UDim2.new(0, 450, 0, 268)

LeftPanel.Name = "LeftPanel"
LeftPanel.Parent = Background
LeftPanel.BackgroundColor3 = Color3.new(0.207843, 0.203922, 0.215686)
LeftPanel.BorderSizePixel = 0
LeftPanel.Position = UDim2.new(0, 0, 0, 19)
LeftPanel.Size = UDim2.new(0, 131, 0, 249)

LogList.Name = "LogList"
LogList.Parent = LeftPanel
LogList.Active = true
LogList.BackgroundColor3 = Color3.new(1, 1, 1)
LogList.BackgroundTransparency = 1
LogList.BorderSizePixel = 0
LogList.Position = UDim2.new(0, 0, 0, 9)
LogList.Size = UDim2.new(0, 131, 0, 232)
LogList.CanvasSize = UDim2.new(0, 0, 0, 0)
LogList.ScrollBarThickness = 4

UIListLayout.Parent = LogList
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

RemoteTemplate.Name = "RemoteTemplate"
RemoteTemplate.Parent = LogList
RemoteTemplate.BackgroundColor3 = Color3.new(1, 1, 1)
RemoteTemplate.BackgroundTransparency = 1
RemoteTemplate.Size = UDim2.new(0, 117, 0, 27)

ColorBar.Name = "ColorBar"
ColorBar.Parent = RemoteTemplate
ColorBar.BackgroundColor3 = Color3.new(1, 0.94902, 0)
ColorBar.BorderSizePixel = 0
ColorBar.Position = UDim2.new(0, 0, 0, 1)
ColorBar.Size = UDim2.new(0, 7, 0, 18)
ColorBar.ZIndex = 2

Text.Name = "Text"
Text.Parent = RemoteTemplate
Text.BackgroundColor3 = Color3.new(1, 1, 1)
Text.BackgroundTransparency = 1
Text.Position = UDim2.new(0, 12, 0, 1)
Text.Size = UDim2.new(0, 105, 0, 18)
Text.ZIndex = 2
Text.Font = Enum.Font.SourceSans
Text.Text = "TEXT"
Text.TextColor3 = Color3.new(1, 1, 1)
Text.TextSize = 14
Text.TextXAlignment = Enum.TextXAlignment.Left

Button.Name = "Button"
Button.Parent = RemoteTemplate
Button.BackgroundColor3 = Color3.new(0, 0, 0)
Button.BackgroundTransparency = 0.75
Button.BorderColor3 = Color3.new(1, 1, 1)
Button.Position = UDim2.new(0, 0, 0, 1)
Button.Size = UDim2.new(0, 117, 0, 18)
Button.AutoButtonColor = false
Button.Font = Enum.Font.SourceSans
Button.Text = ""
Button.TextColor3 = Color3.new(0, 0, 0)
Button.TextSize = 14

RightPanel.Name = "RightPanel"
RightPanel.Parent = Background
RightPanel.BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902)
RightPanel.BorderSizePixel = 0
RightPanel.Position = UDim2.new(0, 131, 0, 19)
RightPanel.Size = UDim2.new(0, 319, 0, 249)

CodeBox.Name = "CodeBox"
CodeBox.Parent = RightPanel
CodeBox.BackgroundColor3 = Color3.new(0.0823529, 0.0745098, 0.0784314)
CodeBox.BorderSizePixel = 0
CodeBox.Size = UDim2.new(0, 319, 0, 119)

ScrollingFrame.Parent = RightPanel
ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.new(1, 1, 1)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.Position = UDim2.new(0, 0, 0.5, 0)
ScrollingFrame.Size = UDim2.new(1, 0, 0.5, -9)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.ScrollBarThickness = 4

UIGridLayout.Parent = ScrollingFrame
UIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIGridLayout.CellPadding = UDim2.new(0, 0, 0, 0)
UIGridLayout.CellSize = UDim2.new(0, 94, 0, 27)

FunctionTemplate.Name = "FunctionTemplate"
FunctionTemplate.Parent = ScrollingFrame
FunctionTemplate.BackgroundColor3 = Color3.new(1, 1, 1)
FunctionTemplate.BackgroundTransparency = 1
FunctionTemplate.Size = UDim2.new(0, 117, 0, 23)

ColorBar_2.Name = "ColorBar"
ColorBar_2.Parent = FunctionTemplate
ColorBar_2.BackgroundColor3 = Color3.new(1, 1, 1)
ColorBar_2.BorderSizePixel = 0
ColorBar_2.Position = UDim2.new(0, 7, 0, 10)
ColorBar_2.Size = UDim2.new(0, 7, 0, 18)
ColorBar_2.ZIndex = 3

Text_2.Name = "Text"
Text_2.Parent = FunctionTemplate
Text_2.BackgroundColor3 = Color3.new(1, 1, 1)
Text_2.BackgroundTransparency = 1
Text_2.Position = UDim2.new(0, 19, 0, 10)
Text_2.Size = UDim2.new(0, 69, 0, 18)
Text_2.ZIndex = 2
Text_2.Font = Enum.Font.SourceSans
Text_2.Text = "TEXT"
Text_2.TextColor3 = Color3.new(1, 1, 1)
Text_2.TextSize = 14
Text_2.TextStrokeColor3 = Color3.new(0.145098, 0.141176, 0.14902)
Text_2.TextXAlignment = Enum.TextXAlignment.Left

Button_2.Name = "Button"
Button_2.Parent = FunctionTemplate
Button_2.BackgroundColor3 = Color3.new(0, 0, 0)
Button_2.BackgroundTransparency = 0.69999998807907
Button_2.BorderColor3 = Color3.new(1, 1, 1)
Button_2.Position = UDim2.new(0, 7, 0, 10)
Button_2.Size = UDim2.new(0, 80, 0, 18)
Button_2.AutoButtonColor = false
Button_2.Font = Enum.Font.SourceSans
Button_2.Text = ""
Button_2.TextColor3 = Color3.new(0, 0, 0)
Button_2.TextSize = 14

TopBar.Name = "TopBar"
TopBar.Parent = Background
TopBar.BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902)
TopBar.BorderSizePixel = 0
TopBar.Size = UDim2.new(0, 450, 0, 19)

Simple.Name = "Simple"
Simple.Parent = TopBar
Simple.BackgroundColor3 = Color3.new(1, 1, 1)
Simple.AutoButtonColor = false
Simple.BackgroundTransparency = 1
Simple.Position = UDim2.new(0, 5, 0, 0)
Simple.Size = UDim2.new(0, 57, 0, 18)
Simple.Font = Enum.Font.SourceSansBold
Simple.Text = "SimpleSpy"
Simple.TextColor3 = Color3.new(1, 1, 1)
Simple.TextSize = 14
Simple.TextXAlignment = Enum.TextXAlignment.Left

CloseButton.Name = "CloseButton"
CloseButton.Parent = TopBar
CloseButton.BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902)
CloseButton.BorderSizePixel = 0
CloseButton.Position = UDim2.new(1, -19, 0, 0)
CloseButton.Size = UDim2.new(0, 19, 0, 19)
CloseButton.Font = Enum.Font.SourceSans
CloseButton.Text = ""
CloseButton.TextColor3 = Color3.new(0, 0, 0)
CloseButton.TextSize = 14

ImageLabel.Parent = CloseButton
ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0, 5, 0, 5)
ImageLabel.Size = UDim2.new(0, 9, 0, 9)
ImageLabel.Image = "http://www.roblox.com/asset/?id=5597086202"

MaximizeButton.Name = "MaximizeButton"
MaximizeButton.Parent = TopBar
MaximizeButton.BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902)
MaximizeButton.BorderSizePixel = 0
MaximizeButton.Position = UDim2.new(1, -38, 0, 0)
MaximizeButton.Size = UDim2.new(0, 19, 0, 19)
MaximizeButton.Font = Enum.Font.SourceSans
MaximizeButton.Text = ""
MaximizeButton.TextColor3 = Color3.new(0, 0, 0)
MaximizeButton.TextSize = 14

ImageLabel_2.Parent = MaximizeButton
ImageLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel_2.BackgroundTransparency = 1
ImageLabel_2.Position = UDim2.new(0, 5, 0, 5)
ImageLabel_2.Size = UDim2.new(0, 9, 0, 9)
ImageLabel_2.Image = "http://www.roblox.com/asset/?id=5597108117"

MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = TopBar
MinimizeButton.BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Position = UDim2.new(1, -57, 0, 0)
MinimizeButton.Size = UDim2.new(0, 19, 0, 19)
MinimizeButton.Font = Enum.Font.SourceSans
MinimizeButton.Text = ""
MinimizeButton.TextColor3 = Color3.new(0, 0, 0)
MinimizeButton.TextSize = 14

ImageLabel_3.Parent = MinimizeButton
ImageLabel_3.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel_3.BackgroundTransparency = 1
ImageLabel_3.Position = UDim2.new(0, 5, 0, 5)
ImageLabel_3.Size = UDim2.new(0, 9, 0, 9)
ImageLabel_3.Image = "http://www.roblox.com/asset/?id=5597105827"

ToolTip.Name = "ToolTip"
ToolTip.Parent = SimpleSpy2
ToolTip.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
ToolTip.BackgroundTransparency = 0.1
ToolTip.BorderColor3 = Color3.new(1, 1, 1)
ToolTip.Size = UDim2.new(0, 200, 0, 50)
ToolTip.ZIndex = 3
ToolTip.Visible = false

TextLabel.Parent = ToolTip
TextLabel.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel.BackgroundTransparency = 1
TextLabel.Position = UDim2.new(0, 2, 0, 2)
TextLabel.Size = UDim2.new(0, 196, 0, 46)
TextLabel.ZIndex = 3
TextLabel.Font = Enum.Font.SourceSans
TextLabel.Text = "This is some slightly longer text."
TextLabel.TextColor3 = Color3.new(1, 1, 1)
TextLabel.TextSize = 14
TextLabel.TextWrapped = true
TextLabel.TextXAlignment = Enum.TextXAlignment.Left
TextLabel.TextYAlignment = Enum.TextYAlignment.Top

-------------------------------------------------------------------------------
-- init
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ContentProvider = game:GetService("ContentProvider")
local TextService = game:GetService("TextService")
local Mouse = game:GetService("Players").LocalPlayer:GetMouse()

local selectedColor = Color3.new(0.321569, 0.333333, 1)
local deselectedColor = Color3.new(0.8, 0.8, 0.8)
--- So things are descending
local layoutOrderNum = 999999999
--- Whether or not the gui is closing
local mainClosing = false
--- Whether or not the gui is closed (defaults to false)
local closed = false
--- Whether or not the sidebar is closing
local sideClosing = false
--- Whether or not the sidebar is closed (defaults to true but opens automatically on remote selection)
local sideClosed = false
--- Whether or not the code box is maximized (defaults to false)
local maximized = false
--- The event logs to be read from
local logs = {}
--- The event currently selected.Log (defaults to nil)
local selected = nil
--- The blacklist (can be a string name or the Remote Instance)
local blacklist = {}
--- The block list (can be a string name or the Remote Instance)
local blocklist = {}
--- Whether or not to add getNil function
local getNil = false
--- Array of remotes (and original functions) connected to
local connectedRemotes = {}
--- True = hookfunction, false = namecall
local toggle = false
local gm = getrawmetatable(game)
local original = gm.__namecall
setreadonly(gm, false)
--- used to prevent recursives
local prevTables = {}
--- holds logs (for deletion)
local remoteLogs = {}
--- used for hookfunction
local remoteEvent = Instance.new("RemoteEvent")
--- used for hookfunction
local remoteFunction = Instance.new("RemoteFunction")
local originalEvent = remoteEvent.FireServer
local originalFunction = remoteFunction.InvokeServer
--- the maximum amount of remotes allowed in logs
_G.SIMPLESPYCONFIG_MaxRemotes = 500
--- how many spaces to indent
local indent = 4
--- used for task scheduler
local scheduled = {}
--- RBXScriptConnect of the task scheduler
local schedulerconnect
local SimpleSpy = {}
local topstr = ""
local bottomstr = ""
local remotesFadeIn
local rightFadeIn
local codebox
local p
local getnilrequired = false

-- autoblock variables
local autoblock = false
local history = {}
local excluding = {}

-- function info variables
local funcEnabled = true

-- remote hooking/connecting api variables
local remoteSignals = {}
local remoteHooks = {}

-- original mouse icon
local oldIcon = Mouse.Icon

-- if mouse inside gui
local mouseInGui = false

-- handy array of RBXScriptConnections to disconnect on shutdown
local connections = {}

-- whether or not SimpleSpy uses 'getcallingscript()' to get the script (default is false because detection)
local useGetCallingScript = false

-- functions

--- Converts arguments to a string and generates code that calls the specified method with them, recommended to be used in conjunction with ValueToString (method must be a string, e.g. `game:GetService("ReplicatedStorage").Remote:FireServer`)
--- @param method string
--- @param args any[]
--- @return string
function SimpleSpy:ArgsToString(method, args)
    assert(typeof(method) == "string", "string expected, got " .. typeof(method))
    assert(typeof(args) == "table", "table expected, got " .. typeof(args))
    return v2v({args = args}) .. "\n\n" .. method .. "(unpack(args))"
end

--- Converts a value to variables with the specified index as the variable name (if nil/invalid then the name will be assigned automatically)
--- @param t any[]
--- @return string
function SimpleSpy:TableToVars(t)
    assert(typeof(t) == "table", "table expected, got " .. typeof(t))
    return v2v(t)
end

--- Converts a value to a variable with the specified `variablename` (if nil/invalid then the name will be assigned automatically)
--- @param value any
--- @return string
function SimpleSpy:ValueToVar(value, variablename)
    assert(variablename == nil or typeof(variablename) == "string", "string expected, got " .. typeof(variablename))
    if not variablename then
        variablename = 1
    end
    return v2v({[variablename] = value})
end

--- Converts any value to a string, cannot preserve function contents
--- @param value any
--- @return string
function SimpleSpy:ValueToString(value)
    return v2s(value)
end

--- Generates the simplespy function info
--- @param func function
--- @return string
function SimpleSpy:GetFunctionInfo(func)
    assert(typeof(func) == "function", "Instance expected, got " .. typeof(func))
    return v2v{functionInfo = {
        info = debug.getinfo(func),
        constants = debug.getconstants(func)
    }}
end

--- Gets the ScriptSignal for a specified remote being fired
--- @param remote Instance
function SimpleSpy:GetRemoteFiredSignal(remote)
    assert(typeof(remote) == "Instance", "Instance expected, got " .. typeof(remote))
    if not remoteSignals[remote] then
        remoteSignals[remote] = newSignal()
    end
    return remoteSignals[remote]
end

--- Allows for direct hooking of remotes **THIS CAN BE VERY DANGEROUS**
--- @param remote Instance
--- @param f function
function SimpleSpy:HookRemote(remote, f)
    assert(typeof(remote) == "Instance", "Instance expected, got " .. typeof(remote))
    assert(typeof(f) == "function", "function expected, got " .. typeof(f))
    remoteHooks[remote] = f
end

--- Blocks the specified remote instance/string
--- @param remote any
function SimpleSpy:BlockRemote(remote)
    assert(typeof(remote) == "Instance" or typeof(remote) == "string", "Instance | string expected, got " .. typeof(remote))
    blocklist[remote] = true
end

--- Excludes the specified remote from logs (instance/string)
--- @param remote any
function SimpleSpy:ExcludeRemote(remote)
    assert(typeof(remote) == "Instance" or typeof(remote) == "string", "Instance | string expected, got " .. typeof(remote))
    blacklist[remote] = true
end

--- Creates a new ScriptSignal that can be connected to and fired
--- @return table
function newSignal()
    local connected = {}
    return {
        Connect = function(self, f)
            assert(connected, "Signal is closed")
            connected[tostring(f)] = f
            return setmetatable({
                Connected = true,
                Disconnect = function(self)
                    if not connected then
                        warn("Signal is already closed")
                    end
                    self.Connected = false
                    connected[tostring(f)] = nil
                end
            },
            {
                __index = function(self, i)
                    if i == "Connected" then
                        return not not connected[tostring(f)]
                    end
                end
            })
        end,
        Fire = function(self, ...)
            for _, f in pairs(connected) do
                coroutine.wrap(f)(...)
            end
        end
    }
end

--- Prevents remote spam from causing lag (clears logs after `_G.SIMPLESPYCONFIG_MaxRemotes` or 500 remotes)
function clean()
    local max = _G.SIMPLESPYCONFIG_MaxRemotes
    if not typeof(max) == "number" and math.floor(max) ~= max then
        max = 500
    end
    if #remoteLogs > max then
        for i = 100, #remoteLogs do
            local v = remoteLogs[i]
            if typeof(v[1]) == "RBXScriptConnection" then
                v[1]:Disconnect()
            end
            if typeof(v[2]) == "Instance" then
                v[2]:Destroy()
            end
        end
        local newLogs = {}
        for i = 1, 100 do
            table.insert(newLogs, remoteLogs[i])
        end
        remoteLogs = newLogs
    end
end

--- Scales the ToolTip to fit containing text
function scaleToolTip()
    local size = TextService:GetTextSize(TextLabel.Text, TextLabel.TextSize, TextLabel.Font, Vector2.new(196, math.huge))
    TextLabel.Size = UDim2.new(0, size.X, 0, size.Y)
    ToolTip.Size = UDim2.new(0, size.X + 4, 0, size.Y + 4)
end

--- Executed when the toggle button (the SimpleSpy logo) is hovered over
function onToggleButtonHover()
    if not toggle then
        TweenService:Create(Simple, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(252, 51, 51)}):Play()
    else
        TweenService:Create(Simple, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(68, 206, 91)}):Play()
    end
end

--- Executed when the toggle button is unhovered over
function onToggleButtonUnhover()
    TweenService:Create(Simple, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(255, 255, 255)}):Play()
end

--- Executed when the X button is hovered over
function onXButtonHover()
    TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 60, 60)}):Play()
end

--- Executed when the X button is unhovered over
function onXButtonUnhover()
    TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(37, 36, 38)}):Play()
end

--- Toggles the remote spy method (when button clicked)
function onToggleButtonClick()
    if toggle then
        TweenService:Create(Simple, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(252, 51, 51)}):Play()
    else
        TweenService:Create(Simple, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(68, 206, 91)}):Play()
    end
    toggleSpyMethod()
end

--- Reconnects bringBackOnResize if the current viewport changes and also connects it initially
function connectResize()
    local lastCam = workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(bringBackOnResize)
    workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
        lastCam:Disconnect()
        if workspace.CurrentCamera then
            lastCam = workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(bringBackOnResize)
        end
    end)
end

--- Brings gui back if it gets lost offscreen (connected to the camera viewport changing)
function bringBackOnResize()
    local currentX = Background.AbsolutePosition.X
    local currentY = Background.AbsolutePosition.Y
    local viewportSize = workspace.CurrentCamera.ViewportSize
    if (currentX < 0) or (currentX > (viewportSize.X - (sideClosed and 131 or TopBar.AbsoluteSize.X))) then
        if currentX < 0 then
            currentX = 0
        else
            currentX = viewportSize.X - (sideClosed and 131 or TopBar.AbsoluteSize.X)
        end
    end
    if (currentY < 0) or (currentY > (viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - 36)) then
        if currentY < 0 then
            currentY = 0
        else
            currentY = viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - 36
        end
    end
    TweenService.Create(TweenService, Background, TweenInfo.new(0.1), {Position = UDim2.new(0, currentX, 0, currentY)}):Play()
end

--- Drags gui (so long as mouse is held down)
function onBarInput(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        local lastPos = UserInputService.GetMouseLocation(UserInputService)
        local mainPos = Background.AbsolutePosition
        local offset = mainPos - lastPos
        local currentPos = offset + lastPos
        RunService.BindToRenderStep(RunService, "drag", 1,
            function()
                local newPos = UserInputService.GetMouseLocation(UserInputService)
                if newPos ~= lastPos then
                    local currentX = (offset + newPos).X
                    local currentY = (offset + newPos).Y
                    local viewportSize = workspace.CurrentCamera.ViewportSize
                    if (currentX < 0 and currentX < currentPos.X) or (currentX > (viewportSize.X - (sideClosed and 131 or TopBar.AbsoluteSize.X)) and currentX > currentPos.X) then
                        if currentX < 0 then
                            currentX = 0
                        else
                            currentX = viewportSize.X - (sideClosed and 131 or TopBar.AbsoluteSize.X)
                        end
                    end
                    if (currentY < 0 and currentY < currentPos.Y) or (currentY > (viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - 36) and currentY > currentPos.Y) then
                        if currentY < 0 then
                            currentY = 0
                        else
                            currentY = viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - 36
                        end
                    end
                    currentPos = Vector2.new(currentX, currentY)
                    lastPos = newPos
                    TweenService.Create(TweenService, Background, TweenInfo.new(0.1), {Position = UDim2.new(0, currentPos.X, 0, currentPos.Y)}):Play()
                end
                if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                    RunService.UnbindFromRenderStep(RunService, "drag")
                end
            end
        )
    end
end

--- Fades out the table of elements (and makes them invisible), returns a function to make them visible again
function fadeOut(elements)
    local data = {}
    for _, v in pairs(elements) do
        if typeof(v) == "Instance" and v:IsA("GuiObject") and v.Visible then
            coroutine.wrap(function()
                data[v] = {
                    BackgroundTransparency = v.BackgroundTransparency
                }
                TweenService:Create(v, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
                if v:IsA("TextBox") or v:IsA("TextButton") or v:IsA("TextLabel") then
                    data[v].TextTransparency = v.TextTransparency
                    TweenService:Create(v, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
                elseif v:IsA("ImageButton") or v:IsA("ImageLabel") then
                    data[v].ImageTransparency = v.ImageTransparency
                    TweenService:Create(v, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
                end
                wait(0.5)
                v.Visible = false
                for i, x in pairs(data[v]) do
                    v[i] = x
                end
                data[v] = true
            end)()
        end
    end
    return function()
        for i, _ in pairs(data) do
            coroutine.wrap(function()
                local properties = {
                    BackgroundTransparency = i.BackgroundTransparency
                }
                i.BackgroundTransparency = 1
                TweenService:Create(i, TweenInfo.new(0.5), {BackgroundTransparency = properties.BackgroundTransparency}):Play()
                if i:IsA("TextBox") or i:IsA("TextButton") or i:IsA("TextLabel") then
                    properties.TextTransparency = i.TextTransparency
                    i.TextTransparency = 1
                    TweenService:Create(i, TweenInfo.new(0.5), {TextTransparency = properties.TextTransparency}):Play()
                elseif i:IsA("ImageButton") or i:IsA("ImageLabel") then
                    properties.ImageTransparency = i.ImageTransparency
                    i.ImageTransparency = 1
                    TweenService:Create(i, TweenInfo.new(0.5), {ImageTransparency = properties.ImageTransparency}):Play()
                end
                i.Visible = true
            end)()
        end
    end
end

--- Expands and minimizes the gui (closed is the toggle boolean)
function toggleMinimize(override)
    if mainClosing and not override or maximized then
        return
    end
    mainClosing = true
    closed = not closed
    if closed then
        if not sideClosed then
            toggleSideTray(true)
        end
        LeftPanel.Visible = true
        TweenService:Create(LeftPanel, TweenInfo.new(0.5), {Size = UDim2.new(0, 131, 0, 0)}):Play()
        wait(0.5)
        remotesFadeIn = fadeOut(LeftPanel:GetDescendants())
        wait(0.5)
    else
        TweenService:Create(LeftPanel, TweenInfo.new(0.5), {Size = UDim2.new(0, 131, 0, 249)}):Play()
        wait(0.5)
        if remotesFadeIn then
            remotesFadeIn()
            remotesFadeIn = nil
        end
        bringBackOnResize()
    end
    mainClosing = false
end

--- Expands and minimizes the sidebar (sideClosed is the toggle boolean)
function toggleSideTray(override)
    if sideClosing and not override or maximized then
        return
    end
    sideClosing = true
    sideClosed = not sideClosed
    if sideClosed then
        rightFadeIn = fadeOut(RightPanel:GetDescendants())
        wait(0.5)
        minimizeSize(0.5)
        wait(0.5)
        RightPanel.Visible = false
    else
        if closed then
            toggleMinimize(true)
        end
        RightPanel.Visible = true
        maximizeSize(0.5)
        wait(0.5)
        if rightFadeIn then
            rightFadeIn()
        end
        bringBackOnResize()
    end
    sideClosing = false
end

--- Expands code box to fit screen for more convenient viewing
function toggleMaximize()
    if not sideClosed and not maximized then
        maximized = true
        local disable = Instance.new("TextButton")
        local prevSize = UDim2.new(0, CodeBox.AbsoluteSize.X, 0, CodeBox.AbsoluteSize.Y)
        local prevPos = UDim2.new(0,CodeBox.AbsolutePosition.X, 0, CodeBox.AbsolutePosition.Y)
        disable.Size = UDim2.new(1, 0, 1, 0)
        disable.BackgroundColor3 = Color3.new()
        disable.BorderSizePixel = 0
        disable.Text = 0
        disable.ZIndex = 3
        disable.BackgroundTransparency = 1
        disable.AutoButtonColor = false
        CodeBox.ZIndex = 4
        CodeBox.Position = prevPos
        CodeBox.Size = prevSize
        TweenService:Create(CodeBox, TweenInfo.new(0.5), {Size = UDim2.new(0.5, 0, 0.5, 0), Position = UDim2.new(0.25, 0, 0.25, 0)}):Play()
        TweenService:Create(disable, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
        disable.MouseButton1Click:Connect(function()
            if UserInputService:GetMouseLocation().Y + 36 >= CodeBox.AbsolutePosition.Y and UserInputService:GetMouseLocation().Y + 36 <= CodeBox.AbsolutePosition.Y + CodeBox.AbsoluteSize.Y
                and UserInputService:GetMouseLocation().X >= CodeBox.AbsolutePosition.X and UserInputService:GetMouseLocation().X <= CodeBox.AbsolutePosition.X + CodeBox.AbsoluteSize.X then
                return
            end
            TweenService:Create(CodeBox, TweenInfo.new(0.5), {Size = prevSize, Position = prevPos}):Play()
            TweenService:Create(disable, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
            wait(0.5)
            disable:Destroy()
            CodeBox.Size = UDim2.new(1, 0, 0.5, 0)
            CodeBox.Position = UDim2.new(0, 0, 0, 0)
            CodeBox.ZIndex = 0
            maximized = false
        end)
    end
end

--- Checks if cursor is within resize range
--- @param p Vector2
function isInResizeRange(p)
    local relativeP = p - Background.AbsolutePosition
    local range = 5
    if relativeP.X >= TopBar.AbsoluteSize.X - range and relativeP.Y >= Background.AbsoluteSize.Y - range
        and relativeP.X <= TopBar.AbsoluteSize.X and relativeP.Y <= Background.AbsoluteSize.Y then
        return true, 'B'
    elseif relativeP.X >= TopBar.AbsoluteSize.X - range and relativeP.X <= Background.AbsoluteSize.X then
        return true, 'X'
    elseif relativeP.Y >= Background.AbsoluteSize.Y - range and relativeP.Y <= Background.AbsoluteSize.Y then
        return true, 'Y'
    end
    return false
end

--- Called when mouse enters SimpleSpy
function mouseEntered()
    local customCursor = Instance.new("ImageLabel")
    customCursor.Size = UDim2.fromOffset(200, 200)
    customCursor.ZIndex = 1e5
    customCursor.BackgroundTransparency = 1
    customCursor.Image = ""
    customCursor.Parent = SimpleSpy2
    UserInputService.OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.ForceHide
    RunService:BindToRenderStep("SIMPLESPY_CURSOR", 1, function()
        if mouseInGui and _G.SimpleSpyExecuted then
            local mouseLocation = UserInputService:GetMouseLocation() - Vector2.new(0, 36)
            customCursor.Position = UDim2.fromOffset(mouseLocation.X - customCursor.AbsoluteSize.X / 2, mouseLocation.Y - customCursor.AbsoluteSize.Y / 2)
            local inRange, type = isInResizeRange(mouseLocation)
            if inRange and not sideClosed and not closed then
                customCursor.Image = type == 'B' and "rbxassetid://6065821980" or type == 'X' and "rbxassetid://6065821086" or type == 'Y' and "rbxassetid://6065821596"
            elseif inRange and not closed and type == 'Y' or type == 'B' then
                customCursor.Image = "rbxassetid://6065821596"
            elseif customCursor.Image ~= "rbxassetid://6065775281" then
                customCursor.Image = "rbxassetid://6065775281"
            end
        else
            UserInputService.OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.None
            customCursor:Destroy()
            RunService:UnbindFromRenderStep("SIMPLESPY_CURSOR")
        end
    end)
end

--- Called when mouse moves
function mouseMoved()
    local mousePos = UserInputService:GetMouseLocation() - Vector2.new(0, 36)
    if not closed
    and mousePos.X >= TopBar.AbsolutePosition.X and mousePos.X <= TopBar.AbsolutePosition.X + TopBar.AbsoluteSize.X
    and mousePos.Y >= Background.AbsolutePosition.Y and mousePos.Y <= Background.AbsolutePosition.Y + Background.AbsoluteSize.Y then
        if not mouseInGui then
            mouseInGui = true
            mouseEntered()
        end
    else
        mouseInGui = false
    end
end

--- Adjusts the ui elements to the 'Maximized' size
function maximizeSize(speed)
    if not speed then
        speed = 0.05
    end
    TweenService:Create(LeftPanel, TweenInfo.new(speed), { Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(RightPanel, TweenInfo.new(speed), { Size = UDim2.fromOffset(Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(TopBar, TweenInfo.new(speed), { Size = UDim2.fromOffset(Background.AbsoluteSize.X, TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(ScrollingFrame, TweenInfo.new(speed), { Size = UDim2.fromOffset(Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X, 110), Position = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(CodeBox, TweenInfo.new(speed), { Size = UDim2.fromOffset(Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(LogList, TweenInfo.new(speed), { Size = UDim2.fromOffset(LogList.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y - 18) }):Play()
end

--- Adjusts the ui elements to close the side
function minimizeSize(speed)
    if not speed then
        speed = 0.05
    end
    TweenService:Create(LeftPanel, TweenInfo.new(speed), { Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(RightPanel, TweenInfo.new(speed), { Size = UDim2.fromOffset(0, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(TopBar, TweenInfo.new(speed), { Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(ScrollingFrame, TweenInfo.new(speed), { Size = UDim2.fromOffset(0, 119), Position = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(CodeBox, TweenInfo.new(speed), { Size = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y) }):Play()
    TweenService:Create(LogList, TweenInfo.new(speed), { Size = UDim2.fromOffset(LogList.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y - 18) }):Play()
end

--- Called on user input while mouse in 'Background' frame
--- @param input InputObject
function backgroundUserInput(input)
    local inRange, type = isInResizeRange(UserInputService:GetMouseLocation() - Vector2.new(0, 36))
    if input.UserInputType == Enum.UserInputType.MouseButton1 and inRange then
        local lastPos = UserInputService:GetMouseLocation()
        local offset = Background.AbsoluteSize - lastPos
        local currentPos = lastPos + offset
        RunService:BindToRenderStep("SIMPLESPY_RESIZE", 1, function()
            local newPos = UserInputService:GetMouseLocation()
            if newPos ~= lastPos then
                local currentX = (newPos + offset).X
                local currentY = (newPos + offset).Y
                if currentX < 450 then
                    currentX = 450
                end
                if currentY < 268 then
                    currentY = 268
                end
                currentPos = Vector2.new(currentX, currentY)
                Background.Size = UDim2.fromOffset((not sideClosed and not closed and (type == "X" or type == "B")) and currentPos.X or Background.AbsoluteSize.X, (--[[(not sideClosed or currentPos.X <= LeftPanel.AbsolutePosition.X + LeftPanel.AbsoluteSize.X) and]] not closed and (type == "Y" or type == "B")) and currentPos.Y or Background.AbsoluteSize.Y)
                if sideClosed then
                    minimizeSize()
                else
                    maximizeSize()
                end
                lastPos = newPos
            end
        end)
        table.insert(connections, UserInputService.InputEnded:Connect(function(inputE)
            if input == inputE then
                RunService:UnbindFromRenderStep("SIMPLESPY_RESIZE")
            end
        end))
    end
end

--- Gets the player an instance is descended from
function getPlayerFromInstance(instance)
    for _, v in pairs(Players:GetPlayers()) do
        if v.Character and (instance:IsDescendantOf(v.Character) or instance == v.Character) then
            return v
        end
    end
end

--- Runs on MouseButton1Click of an event frame
function eventSelect(frame)
    if selected and selected.Log  then
        TweenService:Create(selected.Log.Button, TweenInfo.new(0.5), {BackgroundColor3 = Color3.fromRGB(0, 0, 0)}):Play()
        selected = nil
    end
    for _, v in pairs(logs) do
        if frame == v.Log then
            selected = v
        end
    end
    if selected and selected.Log then
        TweenService:Create(frame.Button, TweenInfo.new(0.5), {BackgroundColor3 = Color3.fromRGB(92, 126, 229)}):Play()
        codebox:setRaw(selected.GenScript)
    end
    if sideClosed then
        toggleSideTray()
    end
end

--- Updates the canvas size to fit the current amount of function buttons
function updateFunctionCanvas()
    ScrollingFrame.CanvasSize = UDim2.fromOffset(UIGridLayout.AbsoluteContentSize.X, UIGridLayout.AbsoluteContentSize.Y)
end

--- Updates the canvas size to fit the amount of current remotes
function updateRemoteCanvas()
    LogList.CanvasSize = UDim2.fromOffset(UIListLayout.AbsoluteContentSize.X, UIListLayout.AbsoluteContentSize.Y)
end

--- Allows for toggling of the tooltip and easy setting of le description
--- @param enable boolean
--- @param text string
function makeToolTip(enable, text)
    if enable then
        if ToolTip.Visible then
            ToolTip.Visible = false
            RunService:UnbindFromRenderStep("ToolTip")
        end
        local first = true
        RunService:BindToRenderStep("ToolTip", 1, function()
            local topLeft = Vector2.new(Mouse.X + 20, Mouse.Y + 20)
            local bottomRight = topLeft + ToolTip.AbsoluteSize
            if topLeft.X < 0 then
                topLeft = Vector2.new(0, topLeft.Y)
            elseif bottomRight.X > workspace.CurrentCamera.ViewportSize.X then
                topLeft = Vector2.new(workspace.CurrentCamera.ViewportSize.X - ToolTip.AbsoluteSize.X, topLeft.Y)
            end
            if topLeft.Y < 0 then
                topLeft = Vector2.new(topLeft.X, 0)
            elseif bottomRight.Y > workspace.CurrentCamera.ViewportSize.Y - 35 then
                topLeft = Vector2.new(topLeft.X, workspace.CurrentCamera.ViewportSize.Y - ToolTip.AbsoluteSize.Y - 35)
            end
            if topLeft.X <= Mouse.X and topLeft.Y <= Mouse.Y then
                topLeft = Vector2.new(Mouse.X - ToolTip.AbsoluteSize.X - 2, Mouse.Y - ToolTip.AbsoluteSize.Y - 2)
            end
            if first then
                ToolTip.Position = UDim2.fromOffset(topLeft.X, topLeft.Y)
                first = false
            else
                ToolTip:TweenPosition(UDim2.fromOffset(topLeft.X, topLeft.Y), "Out", "Linear", 0.1)
            end
        end)
        TextLabel.Text = text
        ToolTip.Visible = true
    else
        if ToolTip.Visible then
            ToolTip.Visible = false
            RunService:UnbindFromRenderStep("ToolTip")
        end
    end
end

--- Creates new function button (below codebox)
--- @param name string
---@param description function
---@param onClick function
function newButton(name, description, onClick)
    local button = FunctionTemplate:Clone()
    button.Text.Text = name
    button.Button.MouseEnter:Connect(function()
        makeToolTip(true, description())
    end)
    button.Button.MouseLeave:Connect(function()
        makeToolTip(false)
    end)
    button.AncestryChanged:Connect(function()
        makeToolTip(false)
    end)
    button.Button.MouseButton1Click:Connect(function(...)
        onClick(button, ...)
    end)
    button.Parent = ScrollingFrame
    updateFunctionCanvas()
end

--- Adds new Remote to logs
--- @param name string The name of the remote being logged
--- @param type string The type of the remote being logged (either 'function' or 'event')
--- @param gen_script any
--- @param remote any
--- @param function_info string
--- @param blocked any
function newRemote(type, name, gen_script, remote, function_info, blocked, src)
    local remoteFrame = RemoteTemplate:Clone()
    remoteFrame.Text.Text = name
    remoteFrame.ColorBar.BackgroundColor3 = type == "event" and Color3.new(255, 242, 0) or Color3.fromRGB(99, 86, 245)
    local id = Instance.new("IntValue")
    id.Name = "ID"
    id.Value = #logs + 1
    id.Parent = remoteFrame
    logs[#logs + 1] = {
        Name = name,
        GenScript = gen_script,
        Function = function_info,
        Remote = remote,
        Log = remoteFrame,
        Blocked = blocked,
        Source = src
    }
    if blocked then
        logs[#logs].GenScript = "-- THIS REMOTE WAS PREVENTED FROM FIRING THE SERVER BY SIMPLESPY\n\n" .. logs[#logs].GenScript
    end
    local connect = remoteFrame.Button.MouseButton1Click:Connect(function()
        eventSelect(remoteFrame)
    end)
    if layoutOrderNum < 1 then
        layoutOrderNum = 999999999
    end
    remoteFrame.LayoutOrder = layoutOrderNum
    layoutOrderNum = layoutOrderNum - 1
    remoteFrame.Parent = LogList
    table.insert(remoteLogs, 1, {connect, remoteFrame})
    clean()
    updateRemoteCanvas()
end

--- Generates a script from the provided arguments (first has to be remote path)
function genScript(remote, ...)
    prevTables = {}
    local gen = ""
    local args = {...}
    if #args > 0 then
        if not pcall(function()
                gen = v2v({args = args}) .. "\n"
            end)
        then
            gen = gen .. "-- TableToString failure! Reverting to legacy functionality (results may vary)\nlocal args = {"
            if
                not pcall(
                    function()
                        for i, v in pairs(args) do
                            if type(i) ~= "Instance" and type(i) ~= "userdata" then
                                gen = gen .. "\n    [" .. tostring(i) .. "] = "
                            elseif type(i) == "string" then
                                gen = gen .. '\n    ["' .. tostring(i) .. '"] = '
                            elseif type(i) == "userdata" and typeof(i) ~= "Instance" then
                                gen = gen .. "\n    [" .. typeof(i) .. ".new(" .. tostring(i) .. ")] = "
                            elseif type(i) == "userdata" then
                                gen = gen .. "\n    [game." .. i:GetFullName() .. ")] = "
                            end
                            if type(v) ~= "Instance" and type(v) ~= "userdata" then
                                gen = gen .. tostring(v)
                            elseif type(v) == "string" then
                                gen = gen .. '"' .. tostring(v) .. '"'
                            elseif type(v) == "userdata" and typeof(v) ~= "Instance" then
                                gen = gen .. typeof(v) .. ".new(" .. tostring(v) .. ")"
                            elseif type(v) == "userdata" then
                                gen = gen .. "game." .. v:GetFullName()
                            end
                        end
                        gen = gen .. "\n}\n\n"
                    end
                )
             then
                gen = gen .. "}\n-- Legacy tableToString failure! Unable to decompile."
            end
        end
        if not remote:IsDescendantOf(game) and not getnilrequired then
            gen = "function getNil(name,class) for _,v in pairs(getnilinstances())do if v.ClassName==class and v.Name==name then return v;end end end\n\n" .. gen
        end
        if remote:IsA("RemoteEvent") then
            gen = gen .. v2s(remote) .. ":FireServer(unpack(args))"
        elseif remote:IsA("RemoteFunction") then
            gen = gen .. v2s(remote) .. ":InvokeServer(unpack(args))"
        end
    else
        if remote:IsA("RemoteEvent") then
            gen = gen .. v2s(remote) .. ":FireServer()"
        elseif remote:IsA("RemoteFunction") then
            gen = gen .. v2s(remote) .. ":InvokeServer()"
        end
    end
    gen = "" .. gen
    prevTables = {}
    return gen
end

--- value-to-string: value, string (out), level (indentation), parent table, var name, is from tovar
function v2s(v, l, p, n, vtv, i, pt, path, tables)
    if typeof(v) == "number" then
        if v == math.huge then
            return "math.huge"
        elseif tostring(v):match("nan") then
            return "0/0 --[[NaN]]"
        end
        return tostring(v)
    elseif typeof(v) == "boolean" then
        return tostring(v)
    elseif typeof(v) == "string" then
        return formatstr(v)
    elseif typeof(v) == "function" then
        return f2s(v)
    elseif typeof(v) == "table" then
        return t2s(v, l, p, n, vtv, i, pt, path, tables)
    elseif typeof(v) == "Instance" then
        return i2p(v)
    elseif typeof(v) == "userdata" then
        return "newproxy(true)"
    elseif type(v) == "userdata" then
        return u2s(v)
    else
        return "nil --[[" .. typeof(v) .. "]]"
    end
end

--- value-to-variable
--- @param t any
function v2v(t)
    topstr = ""
    bottomstr = ""
    getnilrequired = false
    local ret = ""
    local count = 1
    for i, v in pairs(t) do
        if type(i) == "string" and i:match("^[%a_]+[%w_]*$") then
            ret = ret .. "local " .. i .. " = " .. v2s(v, nil, nil, i, true) .. "\n"
        elseif tostring(i):match("^[%a_]+[%w_]*$") then
            ret = ret .. "local " .. tostring(i):lower() .. "_" .. tostring(count) .. " = " .. v2s(v, nil, nil, tostring(i):lower() .. "_" .. tostring(count), true) .. "\n"
        else
            ret = ret .. "local " .. type(v) .. "_" .. tostring(count) .. " = " .. v2s(v, nil, nil, type(v) .. "_" .. tostring(count), true) .. "\n"
        end
        count = count + 1
    end
    if getnilrequired then
        topstr = "function getNil(name,class) for _,v in pairs(getnilinstances())do if v.ClassName==class and v.Name==name then return v;end end end\n" .. topstr
    end
    if #topstr > 0 then
        ret = topstr .. "\n" .. ret
    end
    if #bottomstr > 0 then
        ret = ret .. bottomstr
    end
    return ret
end

--- table-to-string
--- @param t table
--- @param l number
--- @param p table
--- @param n string
--- @param vtv boolean
--- @param i any
--- @param pt table
--- @param path string
--- @param tables table
function t2s(t, l, p, n, vtv, i, pt, path, tables)
    for k, x in pairs(getrenv()) do
        local isgucci, gpath
        if rawequal(x, t) then
            isgucci, gpath = true, ""
        elseif type(x) == "table" then
            isgucci, gpath = v2p(t, x)
        end
        if isgucci then
            if type(k) == "string" and k:match("^[%a_]+[%w_]*$") then
                return k .. gpath
            else
                return "getrenv()[" .. v2s(k) .. "]" .. gpath
            end
        end
    end
    if not path then
        path = ""
    end
    if not l then
        l = 0
        tables = {}
    end
    if not p then
        p = t
    end
    for _, v in pairs(tables) do
        if n and rawequal(v, t) then
            bottomstr = bottomstr .. "\n" .. tostring(n) .. tostring(path) .. " = " .. tostring(n) .. tostring(({v2p(v, p)})[2])
            return "{} --[[DUPLICATE]]"
        end
    end
    table.insert(tables, t)
    local s =  "{"
    local size = 0
    l = l + indent
    for k, v in pairs(t) do
        size = size + 1
        if size > (_G.SimpleSpyMaxTableSize and _G.SimpleSpyMaxTableSize or 1000) then
            break
        end
        if rawequal(k, t) then
            bottomstr = bottomstr .. "\n" .. tostring(n) .. tostring(path) .. "[" .. tostring(n) .. tostring(path) .. "]" .. " = " .. (v == k and tostring(n) .. tostring(path) or v2s(v, l, p, n, vtv, k, t, path .. "[" .. tostring(n) .. tostring(path) .. "]", tables))
            size -= 1
            continue
        end
        local currentPath = ""
        if type(k) == "string" and k:match("^[%a_]+[%w_]*$") then
            currentPath = "." .. k
        else
            currentPath = "[" .. v2s(k, nil, p, n, vtv, i, pt, path) .. "]"
        end
        s = s .. "\n" .. string.rep(" ", l) .. "[" .. v2s(k, l, p, n, vtv, k, t, path .. currentPath, tables) .. "] = " .. v2s(v, l, p, n, vtv, k, t, path .. currentPath, tables) .. ","
    end
    if #s > 1 then
        s = s:sub(1, #s - 1)
    end
    if size > 0 then
        s = s .. "\n" .. string.rep(" ", l - indent)
    end
    return s .. "}"
end

--- function-to-string
function f2s(f)
    for k, x in pairs(getgenv()) do
        local isgucci, gpath
        if rawequal(x, f) then
            isgucci, gpath = true, ""
        elseif type(x) == "table" then
            isgucci, gpath = v2p(f, x)
        end
        if isgucci then
            if type(k) == "string" and k:match("^[%a_]+[%w_]*$") then
                return k .. gpath
            else
                return "getgenv()[" .. v2s(k) .. "]" .. gpath
            end
        end
    end
    -- uwu some cool stuff here once bork finishes up
    -- if SimpleSpy.GetExternalLoader then
    --     local ExternalLoader = SimpleSpy:GetExternalLoader()
    --     local loaded, path = pcall(function() ExternalLoader:LoadAsset("Bork_Functions") end)
    --     if loaded then
    --         local functions = loadfile(path .. "functions.lua")
    --         local out = functions[f]
    --         if out then
    --             return out
    --         end
    --     end
    -- end
    -- local isgucci, gpath = v2p(f, getgc())
    -- if isgucci then
    --     return "getgc()" .. gpath
    -- end
    if debug.getinfo(f).name:match("^[%a_]+[%w_]*$") then
        return "function()end --[[" .. debug.getinfo(f).name .. "]]"
    end
    return "function()end --[[" .. tostring(f) .. "]]"
end

--- instance-to-path
--- @param i userdata
function i2p(i)
    local player = getplayer(i)
    local parent = i
    local out = ""
    if parent == nil then
        return "nil"
    elseif player then
        while true do
            if parent and parent == player.Character then
                if player == Players.LocalPlayer then
                    return 'game:GetService("Players").LocalPlayer.Character' .. out
                else
                    return i2p(player) .. ".Character" .. out
                end
            else
                if parent.Name:match("[%a_]+[%w+]*") ~= parent.Name then
                    out = '[' .. formatstr(parent.Name) .. ']' .. out
                else
                    out = "." .. parent.Name .. out
                end
            end
            parent = parent.Parent
        end
    elseif parent ~= game then
        while true do
            if parent and parent.Parent == game then
                if game:GetService(parent.ClassName) then
                    if parent.ClassName == "Workspace" then
                        return "workspace" .. out
                    else
                        return 'game:GetService("' .. parent.ClassName .. '")' .. out
                    end
                else
                    if parent.Name:match("[%a_]+[%w_]*") then
                        return "game." .. parent.Name .. out
                    else
                        return 'game[' .. formatstr(parent.Name) .. ']' .. out
                    end
                end
            elseif parent.Parent == nil then
                getnilrequired = true
                return 'getNil(' .. formatstr(parent.Name) .. ', "' .. parent.ClassName .. '")' .. out
            elseif parent == Players.LocalPlayer then
                out = ".LocalPlayer" .. out
            else
                if parent.Name:match("[%a_]+[%w_]*") ~= parent.Name then
                    out = '[' .. formatstr(parent.Name) .. ']' .. out
                else
                    out = "." .. parent.Name .. out
                end
            end
            parent = parent.Parent
        end
    else
        return "game"
    end
end

--- userdata-to-string: userdata
--- @param u userdata
function u2s(u)
    if typeof(u) == "TweenInfo" then
        -- TweenInfo
        return "TweenInfo.new(" ..tostring(u.Time) .. ", Enum.EasingStyle." .. tostring(u.EasingStyle) .. ", Enum.EasingDirection." .. tostring(u.EasingDirection) .. ", " .. tostring(u.RepeatCount) .. ", " .. tostring(u.Reverses) .. ", " .. tostring(u.DelayTime) .. ")"
    elseif typeof(u) == "Ray" then
        -- Ray
        return "Ray.new(" .. u2s(u.Origin) .. ", " .. u2s(u.Direction) .. ")"
    elseif typeof(u) == "NumberSequence" then
        -- NumberSequence
        local ret = "NumberSequence.new("
        for i, v in pairs(u.KeyPoints) do
            ret = ret .. tostring(v)
            if i < #u.Keypoints then
                ret = ret .. ", "
            end
        end
        return ret .. ")"
    elseif typeof(u) == "DockWidgetPluginGuiInfo" then
        -- DockWidgetPluginGuiInfo
        return "DockWidgetPluginGuiInfo.new(Enum.InitialDockState" .. tostring(u) .. ")"
    elseif typeof(u) == "ColorSequence" then
        -- ColorSequence
        local ret = "ColorSequence.new("
        for i, v in pairs(u.KeyPoints) do
            ret = ret .. "Color3.new(" .. tostring(v) .. ")"
            if i < #u.Keypoints then
                ret = ret .. ", "
            end
        end
        return ret .. ")"
    elseif typeof(u) == "BrickColor" then
        -- BrickColor
        return "BrickColor.new(" .. tostring(u.Number) .. ")"
    elseif typeof(u) == "NumberRange" then
        -- NumberRange
        return "NumberRange.new(" .. tostring(u.Min) .. ", " .. tostring(u.Max) .. ")"
    elseif typeof(u) == "Region3" then
        -- Region3
        local center = u.CFrame.Position
        local size = u.CFrame.Size
        local vector1 = center - size / 2
        local vector2 = center + size / 2
        return "Region3.new(" .. u2s(vector1) .. ", " .. u2s(vector2) .. ")"
    elseif typeof(u) == "Faces" then
        -- Faces
        local faces = {}
        if u.Top then
            table.insert(faces, "Enum.NormalId.Top")
        end
        if u.Bottom then
            table.insert(faces, "Enum.NormalId.Bottom")
        end
        if u.Left then
            table.insert(faces, "Enum.NormalId.Left")
        end
        if u.Right then
            table.insert(faces, "Enum.NormalId.Right")
        end
        if u.Back then
            table.insert(faces, "Enum.NormalId.Back")
        end
        if u.Front then
            table.insert(faces, "Enum.NormalId.Front")
        end
        return "Faces.new(" .. table.concat(faces, ", ") .. ")"
    elseif typeof(u) == "EnumItem" then
        return tostring(u)
    elseif typeof(u) == "Enums" then
        return "Enum"
    elseif typeof(u) == "Enum" then
        return "Enum." .. tostring(u)
    elseif typeof(u) == "RBXScriptSignal" then
        return "nil --[[RBXScriptSignal]]"
    elseif typeof(u) == "Vector3" then
        return string.format("Vector3.new(%s, %s, %s)", v2s(u.X), v2s(u.Y), v2s(u.Z))
    elseif typeof(u) == "CFrame" then
        return string.format("CFrame.new(%s, %s)", v2s(u.Position), v2s(u.LookVector))
    elseif typeof(u) == "DockWidgetPluginGuiInfo" then
        return string.format("DockWidgetPluginGuiInfo(%s, %s, %s, %s, %s, %s, %s)", "Enum.InitialDockState.Right", v2s(u.InitialEnabled), v2s(u.InitialEnabledShouldOverrideRestore), v2s(u.FloatingXSize), v2s(u.FloatingYSize), v2s(u.MinWidth), v2s(u.MinHeight))
    elseif typeof(u) == "RBXScriptConnection" then
        return "nil --[[RBXScriptConnection " .. tostring(u) .. "]]"
    elseif typeof(u) == "RaycastResult" then
        return "nil --[[RaycastResult " .. tostring(u) .. "]]"
    elseif typeof(u) == "PathWaypoint" then
        return string.format("PathWaypoint.new(%s, %s)", v2s(u.Position), v2s(u.Action))
    else
        return typeof(u) .. ".new(" .. tostring(u) .. ")"
    end
end

--- Gets the player an instance is descended from
function getplayer(instance)
    for _, v in pairs(Players:GetPlayers()) do
        if v.Character and (instance:IsDescendantOf(v.Character) or instance == v.Character) then
            return v
        end
    end
end

--- value-to-path (in table)
function v2p(x, t, path, prev)
    if not path then
        path = ""
    end
    if not prev then
        prev = {}
    end
    if rawequal(x, t) then
        return true, ""
    end
    for i, v in pairs(t) do
        if rawequal(v, x) then
            if type(i) == "string" and i:match("^[%a_]+[%w_]*$") then
                return true, (path .. "." .. i)
            else
                return true, (path .. "[" .. v2s(i) .. "]")
            end
        end
        if type(v) == "table" then
            local duplicate = false
            for _, y in pairs(prev) do
                if rawequal(y, v) then
                    duplicate = true
                end
            end
            if not duplicate then
                table.insert(prev, t)
                local found
                found, p = v2p(x, v, path, prev)
                if found then
                    if type(i) == "string" and i:match("^[%a_]+[%w_]*$") then
                        return true, "." .. i .. p
                    else
                        return true, "[" .. v2s(i) .. "]" .. p
                    end
                end
            end
        end
    end
    return false, ""
end

--- format s: string, byte encrypt (for weird symbols)
function formatstr(s)
    return '"' .. handlespecials(s) .. '"'
end

--- Adds \'s to the text as a replacement to whitespace chars and other things because string.format can't yayeet
function handlespecials(s)
    local i = 0
    repeat
        i = i + 1
        local char = s:sub(i, i)
        if string.byte(char) then
            if char == "\n" then
                s = s:sub(0, i - 1) .. "\\n" .. s:sub(i + 1, -1)
                i = i + 1
            elseif char == "\t" then
                s = s:sub(0, i - 1) .. "\\t" .. s:sub(i + 1, -1)
                i = i + 1
            elseif char == "\\" then
                s = s:sub(0, i - 1) .. "\\\\" .. s:sub(i + 1, -1)
                i = i + 1
            elseif char == '"' then
                s = s:sub(0, i - 1) .. '\\"' .. s:sub(i + 1, -1)
                i = i + 1
            elseif string.byte(char) > 126 or string.byte(char) < 32 then
                s = s:sub(0, i - 1) .. "\\" .. string.byte(char) .. s:sub(i + 1, -1)
                i = i + #tostring(string.byte(char))
            end
        end
    until char == ""
    return s
end

--- finds script from 'src' from getinfo, returns nil if not found
--- @param src string
function getScriptFromSrc(src)
    local realPath
    local runningTest
    --- @type number
    local s, e
    local match = false
    if src:sub(1, 1) == "=" then
        realPath = game
        s = 2
    else
        runningTest = src:sub(2, e and e - 1 or -1)
        for _, v in pairs(getnilinstances()) do
            if v.Name == runningTest then
                realPath = v
                break
            end
        end
        s = #runningTest + 1
    end
    if realPath then
        e = src:sub(s, -1):find("%.")
        local i = 0
        repeat
            i += 1
            if not e then
                runningTest = src:sub(s, -1)
                local test = realPath.FindFirstChild(realPath, runningTest)
                if test then
                    realPath = test
                end
                match = true
            else
                runningTest = src:sub(s, e)
                local test = realPath.FindFirstChild(realPath, runningTest)
                local yeOld = e
                if test then
                    realPath = test
                    s = e + 2
                    e = src:sub(e + 2, -1):find("%.")
                    e = e and e + yeOld or e
                else
                    e = src:sub(e + 2, -1):find("%.")
                    e = e and e + yeOld or e
                end
            end
        until match or i >= 50
    end
    return realPath
end

--- schedules the provided function (and calls it with any args after)
function schedule(f, ...)
    table.insert(scheduled, {f, ...})
end

--- the big (well tbh small now) boi task scheduler himself, handles p much anything as quicc as possible
function taskscheduler()
    if not toggle then
        scheduled = {}
        return
    end
    if #scheduled > 1000 then
        table.remove(scheduled, #scheduled)
    end
    if #scheduled > 0 then
        local currentf = scheduled[1]
        table.remove(scheduled, 1)
        if type(currentf) == "table" and type(currentf[1]) == "function" then
            pcall(unpack(currentf))
        end
    end
end

--- Handles remote logs
function remoteHandler(hookfunction, methodName, remote, args, func, calling)
    if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
        if funcEnabled and not calling then
            _, calling = pcall(getScriptFromSrc, debug.getinfo(func).source)
        end
        coroutine.wrap(function()
            if remoteSignals[remote] then
                remoteSignals[remote]:Fire(args)
            end
        end)()
        if autoblock then
            if excluding[remote] then
                return
            end
            if not history[remote] then
                history[remote] = {badOccurances = 0, lastCall = tick()}
            end
            if tick() - history[remote].lastCall < 1 then
                history[remote].badOccurances += 1
                return
            else
                history[remote].badOccurances = 0
            end
            if history[remote].badOccurances > 3 then
                excluding[remote] = true
                return
            end
            history[remote].lastCall = tick()
        end
        local functionInfoStr
        local src
        if func and islclosure(func) then
            local functionInfo = {}
            pcall(function() functionInfo.info = debug.getinfo(func) end)
            pcall(function() functionInfo.constants = debug.getconstants(func) end)
            pcall(function() functionInfoStr = v2v{functionInfo = functionInfo} end)
            pcall(function() if type(calling) == "userdata" then src = calling end end)
        end
        if methodName:lower() == "fireserver" then
            newRemote("event", remote.Name, genScript(remote, table.unpack(args)), remote, functionInfoStr, (blocklist[remote] or blocklist[remote.Name]), src)
        elseif methodName:lower() == "invokeserver" then
            newRemote("function", remote.Name, genScript(remote, table.unpack(args)), remote, functionInfoStr, (blocklist[remote] or blocklist[remote.Name]), src)
        end
    end
end

--- Used for hookfunction
function hookRemote(remoteType, remote, ...)
    local args = {...}
    if remoteHooks[remote] then
        args = remoteHooks[remote](args)
    end
    if typeof(remote) == "Instance" and not (blacklist[remote] or blacklist[remote.Name]) then
        local func
        local calling
        if funcEnabled then
            func = debug.getinfo(4).func
            calling = useGetCallingScript and getcallingscript() or nil
        end
        schedule(remoteHandler, true, remoteType == "RemoteEvent" and "fireserver" or "invokeserver", remote, args, func, calling)
        if (blocklist[remote] or blocklist[remote.Name]) then
            return
        end
    end
    if remoteType == "RemoteEvent" then
        if remoteHooks[remote] then
            return originalEvent(remote, unpack(args))
        end
        return originalEvent(remote, ...)
    else
        if remoteHooks[remote] then
            return originalFunction(remote, unpack(args))
        end
        return originalFunction(remote, ...)
    end
end

local newnamecall = newcclosure(function(...)
    local args = {...}
    local methodName = getnamecallmethod()
    local remote = args[1]
    if (methodName:lower() == "invokeserver" or methodName:lower() == "fireserver") and not (blacklist[remote] or blacklist[remote.Name]) then
        if remoteHooks[remote] then
            args = remoteHooks[remote]({args, unpack(args, 2)})
        end
        local func
        local calling
        if funcEnabled then
            func = debug.getinfo(3).func
            calling = useGetCallingScript and getcallingscript() or nil
        end
        coroutine.wrap(function()
            schedule(remoteHandler, false, methodName, remote, {unpack(args, 2)}, func, calling)
        end)()
    end
    if typeof(remote) == "Instance" and (methodName:lower() == "invokeserver" or methodName:lower() == "fireserver") and (blocklist[remote] or blocklist[remote.Name]) then
        return nil
    elseif (methodName:lower() == "invokeserver" or methodName:lower() == "fireserver") and remoteHooks[remote] then
        return original(unpack(args))
    else
        return original(...)
    end
end)

local newFireServer = newcclosure(function(...) return hookRemote("RemoteEvent", ...) end)

local newInvokeServer = newcclosure(function(...) return hookRemote("RemoteFunction", ...) end)

--- Toggles on and off the remote spy
function toggleSpy()
    if not toggle then
        setreadonly(gm, false)
        if not original then
            original = gm.__namecall
            if not original then
                warn("SimpleSpy: namecall method not found!\n")
                onToggleButtonClick()
                return
            end
        end
        gm.__namecall = newnamecall
        originalEvent = hookfunction(remoteEvent.FireServer, newFireServer)
        originalFunction = hookfunction(remoteFunction.InvokeServer, newInvokeServer)
    else
        setreadonly(gm, false)
        gm.__namecall = original
        hookfunction(remoteEvent.FireServer, originalEvent)
        hookfunction(remoteFunction.InvokeServer, originalFunction)
    end
end

--- Toggles between the two remotespy methods (hookfunction currently = disabled)
function toggleSpyMethod()
    toggleSpy()
    toggle = not toggle
end

--- Shuts down the remote spy
function shutdown()
    if schedulerconnect then
        schedulerconnect:Disconnect()
    end
    for _, connection in pairs(connections) do
        coroutine.wrap(function()
            connection:Disconnect()
        end)()
    end
    setreadonly(gm, false)
    SimpleSpy2:Destroy()
    hookfunction(remoteEvent.FireServer, originalEvent)
    hookfunction(remoteFunction.InvokeServer, originalFunction)
    gm.__namecall = original
    _G.SimpleSpyExecuted = false
end

-- main
if not _G.SimpleSpyExecuted then
    local succeeded, err = pcall(function()
        _G.SimpleSpyShutdown = shutdown
        ContentProvider:PreloadAsync({"rbxassetid://6065821980", "rbxassetid://6065774948", "rbxassetid://6065821086", "rbxassetid://6065821596", ImageLabel, ImageLabel_2, ImageLabel_3})
        onToggleButtonClick()
        RemoteTemplate.Parent = nil
        FunctionTemplate.Parent = nil
        codebox = Highlight.new(CodeBox)
        codebox:setRaw("")
        getgenv().SimpleSpy = SimpleSpy
        TextLabel:GetPropertyChangedSignal("Text"):Connect(scaleToolTip)
        TopBar.InputBegan:Connect(onBarInput)
        MinimizeButton.MouseButton1Click:Connect(toggleMinimize)
        MaximizeButton.MouseButton1Click:Connect(toggleSideTray)
        Simple.MouseButton1Click:Connect(onToggleButtonClick)
        CloseButton.MouseEnter:Connect(onXButtonHover)
        CloseButton.MouseLeave:Connect(onXButtonUnhover)
        Simple.MouseEnter:Connect(onToggleButtonHover)
        Simple.MouseLeave:Connect(onToggleButtonUnhover)
        CloseButton.MouseButton1Click:Connect(shutdown)
        table.insert(connections, UserInputService.InputBegan:Connect(backgroundUserInput))
        table.insert(connections, Mouse.Move:Connect(mouseMoved))
        connectResize()
        SimpleSpy2.Enabled = true
        coroutine.wrap(function()
            wait(1)
            onToggleButtonUnhover()
        end)()
        schedulerconnect = RunService.Heartbeat:Connect(taskscheduler)
        if syn and syn.protect_gui then pcall(syn.protect_gui, SimpleSpy2) end
        SimpleSpy2.Parent = gethui and gethui() or CoreGui
    end)
    if succeeded then
        _G.SimpleSpyExecuted = true
    else
        warn("A fatal error has occured, SimpleSpy was unable to launch properly.\nPlease DM this error message to @exx#9394:\n\n" .. tostring(err))
        SimpleSpy2:Destroy()
        hookfunction(remoteEvent.FireServer, originalEvent)
        hookfunction(remoteFunction.InvokeServer, originalFunction)
        gm.__namecall = original
        return
    end
else
    SimpleSpy2:Destroy()
    return
end

----- ADD ONS ----- (easily add or remove additonal functionality to the RemoteSpy!)
--[[
    Some helpful things:
        - add your function in here, and create buttons for them through the 'newButton' function
        - the first argument provided is the TextButton the player clicks to run the function
        - generated scripts are generated when the namecall is initially fired and saved in remoteFrame objects
        - blacklisted remotes will be ignored directly in namecall (less lag)
        - the properties of a 'remoteFrame' object:
            {
                Name: (string) The name of the Remote
                GenScript: (string) The generated script that appears in the codebox (generated when namecall fired)
                Source: (Instance (LocalScript)) The script that fired/invoked the remote
                Remote: (Instance (RemoteEvent) | Instance (RemoteFunction)) The remote that was fired/invoked
                Log: (Instance (TextButton)) The button being used for the remote (same as 'selected.Log')
            }
        - globals list: (contact @exx#9394 for more information or if you have suggestions for more to be added)
            - closed: (boolean) whether or not the GUI is currently minimized
            - logs: (table[remoteFrame]) full of remoteFrame objects (properties listed above)
            - selected: (remoteFrame) the currently selected remoteFrame (properties listed above)
            - blacklist: (string[] | Instance[] (RemoteEvent) | Instance[] (RemoteFunction)) an array of blacklisted names and remotes
            - codebox: (Instance (TextBox)) the textbox that holds all the code- cleared often
]]
-- Copies the contents of the codebox
newButton(
    "Copy Code",
    function() return "Click to copy code" end,
    function()
        setclipboard(codebox:getString())
        TextLabel.Text = "Copied successfully!"
    end
)

--- Copies the source script (that fired the remote)
newButton(
    "Copy Remote",
    function() return "Click to copy the path of the remote" end,
    function()
        if selected then
            setclipboard(v2s(selected.Remote))
            TextLabel.Text = "Copied!"
        end
    end
)

-- Executes the contents of the codebox through loadstring
newButton(
    "Run Code",
    function() return "Click to execute code" end,
    function()
        local orText = "Click to execute code"
        TextLabel.Text = "Executing..."
        local succeeded = pcall(function() return loadstring(codebox:getString())() end)
        if succeeded then
            TextLabel.Text = "Executed successfully!"
        else
            TextLabel.Text = "Execution error!"
        end
    end
)

--- Gets the calling script (not super reliable but w/e)
newButton(
    "Get Script",
    function() return "Click to copy calling script to clipboard\nWARNING: Not super reliable, nil == could not find" end,
    function()
        if selected then
            setclipboard(SimpleSpy:ValueToString(selected.Source))
            TextLabel.Text = "Done!"
        end
    end
)

--- Decompiles the script that fired the remote and puts it in the code box
newButton(
    "Function Info",
    function() return "Click to view calling function information" end,
    function()
        if selected then
            if selected.Function then
                codebox:setRaw("-- Calling function info\n-- Generated by the SimpleSpy serializer\n\n" .. tostring(selected.Function))
            end
            TextLabel.Text = "Done! Function info generated by the SimpleSpy Serializer."
        end
    end
)

--- Clears the Remote logs
newButton(
    "Clr Logs",
    function() return "Click to clear logs" end,
    function()
        TextLabel.Text = "Clearing..."
        logs = {}
        for _, v in pairs(LogList:GetChildren()) do
            if not v:IsA("UIListLayout") then
                v:Destroy()
            end
        end
        codebox:setRaw("")
        selected = nil
        TextLabel.Text = "Logs cleared!"
    end
)

--- Excludes the selected.Log Remote from the RemoteSpy
newButton(
    "Exclude (i)",
    function() return "Click to exclude this Remote" end,
    function()
        if selected then
            blacklist[selected.Remote] = true
            TextLabel.Text = "Excluded!"
        end
    end
)

--- Excludes all Remotes that share the same name as the selected.Log remote from the RemoteSpy
newButton(
    "Exclude (n)",
    function() return "Click to exclude all remotes with this name" end,
    function()
        if selected then
            blacklist[selected.Name] = true
            TextLabel.Text = "Excluded!"
        end
    end
)

--- clears blacklist
newButton(
    "Clr Blacklist",
    function() return "Click to clear the blacklist" end,
    function()
        blacklist = {}
        TextLabel.Text = "Blacklist cleared!"
    end
)

--- Prevents the selected.Log Remote from firing the server (still logged)
newButton(
    "Block (i)",
    function() return "Click to stop this remote from firing" end,
    function()
        if selected then
            blocklist[selected.Remote] = true
            TextLabel.Text = "Excluded!"
        end
    end
)

--- Prevents all remotes from firing that share the same name as the selected.Log remote from the RemoteSpy (still logged)
newButton(
    "Block (n)",
    function() return "Click to stop remotes with this name from firing" end,
    function()
        if selected then
            blocklist[selected.Name] = true
            TextLabel.Text = "Excluded!"
        end
    end
)

--- clears blacklist
newButton(
    "Clr Blocklist",
    function() return "Click to stop blocking remotes" end,
    function()
        blocklist = {}
        TextLabel.Text = "Blocklist cleared!"
    end
)

--- Attempts to decompile the source script
newButton(
    "Decompile",
    function() return "Attempts to decompile source script\nWARNING: Not super reliable, nil == could not find" end,
    function()
        if selected then
            if selected.Source then
                codebox:setRaw(decompile(selected.Source))
                TextLabel.Text = "Done!"
            else
                TextLabel.Text = "Source not found!"
            end
        end
    end
)

newButton(
    "Disable Info",
    function() return string.format("[%s] Toggle function info (because it can cause lag in some games)", funcEnabled and "ENABLED" or "DISABLED") end,
    function()
        funcEnabled = not funcEnabled
        TextLabel.Text = string.format("[%s] Toggle function info (because it can cause lag in some games)", funcEnabled and "ENABLED" or "DISABLED")
    end
)

newButton(
    "Autoblock",
    function() return string.format("[%s] [BETA] Intelligently detects and excludes spammy remote calls from logs", autoblock and "ENABLED" or "DISABLED") end,
    function()
        autoblock = not autoblock
        TextLabel.Text = string.format("[%s] [BETA] Intelligently detects and excludes spammy remote calls from logs", autoblock and "ENABLED" or "DISABLED")
        history = {}
        excluding = {}
    end
)

newButton(
    "CallingScript",
    function() return string.format("[%s] [UNSAFE] Uses 'getcallingscript' to get calling script for Decompile and GetScript. Much more reliable, but opens up SimpleSpy to detection and/or instability.", useGetCallingScript and "ENABLED" or "DISABLED") end,
    function()
        useGetCallingScript = not useGetCallingScript
        TextLabel.Text = string.format("[%s] [UNSAFE] Uses 'getcallingscript' to get calling script for Decompile and GetScript. Much more reliable, but opens up SimpleSpy to detection and/or instability.", useGetCallingScript and "ENABLED" or "DISABLED")
    end
)
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "Walk speed shitter",
   Range = {0, 300},
   Increment = 1,
   Suffix = "speed",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Button = MainTab:CreateButton({
   Name = "dark dex",
   Callback = function()
        loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Shadow-Developer/Shadow/master/Scripts/DarkDexExplorer.lua"))()
   end,
})

local Button = MainTab:CreateButton({
   Name = "Azure Modded solara",
   Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Actyrn/Scripts/main/AzureModded"))()
   end,
})

local Button = MainTab:CreateButton({
   Name = "MiseryccPaid",
   Callback = function()
        
--[[

// Misery Source || v1.0.5
// Hi calls || << >>

]]--

print("=")

--// Initialize
if not game:IsLoaded() then
    game.Loaded:Wait()
end

print("=")
  
  if (not LPH_OBFUSCATED) then
      LPH_NO_VIRTUALIZE = function(...) return (...) end;
      LPH_JIT_MAX = function(...) return (...) end;
      LPH_JIT_ULTRA = function(...) return (...) end;
  end

  print("CheckPoint 1")
  
  --// Custom Drawing
  -- loadstring((syn and syn.request or request)({Url = "https://raw.githubusercontent.com/Hxckerskyy/miserycc.lua/main/someshit.lua", Method = "Get"}).Body)(); -- J4VZ9cJh
  local MainColor = Color3.fromRGB(255, 102, 204)
  local CrosshairHandler = loadstring(game:HttpGet('https://raw.githubusercontent.com/Hxckerskyy/miserycc.lua/main/crosshair.lua', true))() do
    getgenv().crosshair.enabled = false
    getgenv().crosshair.color = MainColor
  end
  local ESPHandler = loadstring(game:HttpGet('https://raw.githubusercontent.com/Hxckerskyy/miserycc.lua/main/esp.lua', true))() do
    getgenv().esp.Enabled = false
    getgenv().esp.SkeletonEnabled = false
    getgenv().esp.ChamsEnabled = false
  end

  local YunDrawingApi = loadstring(game:HttpGet('https://raw.githubusercontent.com/Hxckerskyy/miserycc.lua/main/yunapi.lua', true))()

  local TargetCircle = YunDrawingApi:New3DCircle() do
    TargetCircle.Visible = false
    TargetCircle.ZIndex = 1
    TargetCircle.Transparency = 1
    TargetCircle.Color = MainColor
    TargetCircle.Thickness = 1
    TargetCircle.Radius = 2
    TargetCircle.Rotation = Vector2.new(2, 0)
end
  
  --// Services
  local Workspace = game:GetService("Workspace")
  local Debris            = game:GetService('Debris');
  local Players = game:GetService("Players")
  local UserInputService = game:GetService('UserInputService')
  local TweenService = game:GetService('TweenService')
  local ContextAction = game:GetService('ContextActionService')
  local Lighting = game:GetService('Lighting')
  local MarketPlace = game:GetService('MarketplaceService')
  local RunService = game:GetService('RunService')
  local ReplicatedStorage = game:GetService('ReplicatedStorage')
  
  --// Variables

  print("CheckPoint 2")
  
  local Target = nil
  local Notification_Icon = "rbxassetid://57254792"
  
  
  local Notifications = {};
  local Utility = {};
  local TracerLine, nigganiggaXD , FakeHitboxPart, DotParent, newBillboard, newFrame, newUiCornor = Drawing.new("Line"), Instance.new("MeshPart"), Instance.new("Part",game.Workspace), Instance.new("Part",game.Workspace), Instance.new("BillboardGui", DotParent), Instance.new("Frame", newBillboard),  Instance.new("UICorner", newFrame)
  local sayMessage = function(msg) ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "ALL") end
  task.spawn(function ()
    newBillboard.Name = "endless"
    newBillboard.Adornee = DotParent
    newBillboard.Size = UDim2.new(1, 0, 1, 0)
    newBillboard.AlwaysOnTop = true
    newFrame.Size = UDim2.new(1, 0, 1, 0)
    newFrame.BackgroundTransparency = 0
    newUiCornor.CornerRadius = UDim.new(50, 50)
    DotParent.CanCollide = false
    DotParent.Anchored = true
    DotParent.CFrame = CFrame.new(0,2000,0)
    DotParent.Transparency = 1
    nigganiggaXD.MeshId = "rbxassetid://3726303797"  --3726303797
    nigganiggaXD.CanCollide = false
    nigganiggaXD.Anchored = true
    nigganiggaXD.Material = Enum.Material.Neon
    nigganiggaXD.Parent = game.Workspace
  end)
  
  local AntiAimViewer_Enabled = false
  local AntiAimViewer_HighLight = false
  local AntiAimViewer_HighLight_OutLineColor = Color3.fromRGB(255, 255, 255)
  local AntiAimViewer_HighLight_FillColor = MainColor
  
  local AntiAimViewer_Color = Color3.fromRGB(255, 102, 204)
  local AntiAimViewer_Target = nil
  local AntiAimViewer_Method = "MousePos"
  
  local Client = Players.LocalPlayer
  local ClientCharacter = Client and (Client.Character or Client.CharacterAdded:Wait())
  local enabled, TargetFalling, DetectAnti, AntiGroundValue, WhenAntiGroundActivate, Script = false, false, true, 0.5, -20, {
    Drawing = {},
    Connections = {},
    Locals = {
        NetworkShouldSleep = false,
        OriginalVelocity = {}
    },
    Functions = {}
}
  local Mouse, Camera = Client:GetMouse(), game:GetService("Workspace").CurrentCamera
  local PreviousPosition, PreviusVelocity = Vector3.new(0,0,0), Vector3.new(0,0,0)
  local req =  (syn and syn.request or request);
  local CFrameSpeedKeyBind
  local flyvariableshit = false
  local chatSpamTick = tick()
  local GuiService   = game:GetService('GuiService');
  local GetGuiInset = GuiService.GetGuiInset


  local EnabledTrashTalkF = true;
  getgenv().UsableTrashTalk = false
  
  
  local raycastParams = RaycastParams.new()
  raycastParams.FilterDescendantsInstances = {Workspace.CurrentCamera, ClientCharacter}
  raycastParams.FilterType = Enum.RaycastFilterType.Exclude
  raycastParams.IgnoreWater = true
  
  --// Tables
  local Notifications = {};
  local Utility = {};
  local FoVCircle = Drawing.new('Circle') do
    FoVCircle.Radius       = 1500
    FoVCircle.Color        = MainColor
    FoVCircle.Filled       = false
    FoVCircle.NumSides     = 120
    FoVCircle.Transparency = 1
    FoVCircle.Visible      = false
end

local TeleportService = game:GetService("TeleportService");
local Desync = {}

local Notifications = {};
local Utility = {};
local Games = {
    [2788229376] = {Name = "Da Hood",                  Argument = "UpdateMousePosI"},
    [16033173781] = {Name = "Da Hood Macro",                  Argument = "UpdateMousePosI"},
    [9825515356] = {Name = "Hood Customs",             Argument = "MousePosUpdate"},
    [5602055394] = {Name = "Hood Modded",              Argument = "MousePos"},
    [9183932460] = {Name = "Untitled Hood",            Argument = "UpdateMousePos"},
    [16709048641] = {Name = "Da Downhill",             Argument = "MOUSE"},
    [16357436647] = {Name = "Hood Bank",               Argument = "MOUSE"},
    [16357446356] = {Name = "Da Uphill",               Argument = "MOUSE"},
    [15186202290] = {Name = "Da Strike",               Argument = "MOUSE"},
    [15763167440] = {Name = "Da Hood Bot Aim Trainer", Argument = "MOUSE"},
    [11143225577] = {Name = "1v1 Hood Aim Trainer",    Argument = "UpdateMousePos"},
    [15763494605] = {Name = "Hood Aim",                Argument = "MOUSE"},
    [15166543806] = {Name = "Moon Hood",               Argument = "MoonUpdateMousePos"},
}

if Games[game.PlaceId] then
    local gameInfo = Games[game.PlaceId]
    MousePos = gameInfo.Argument
else
    MousePos = "UpdateMousePos"
end

local ItemTable = {
    ['Guns'] = {
        ['LMG'] = '[LMG] - $3978';
        ['AK-47'] = '[AK47] - $2387';
        ['Silencer AR'] = '[SilencerAR] - $1326';
        ['Silencer'] = '[Silencer] - $583';
        ['Revolver'] = '[Revolver] - $1379';
        ['AR'] = '[AR] - $1061';
        ['AUG'] = '[AUG] - $2069';
        ['Double-Barrel'] = '[Double-Barrel SG] - $1432';
        ['Drum Gun'] = '[DrumGun] - $3183';
        ['Flamethrower'] = '[Flamethrower] - $15914';
        ['Glock'] = '[Glock] - $318';
        ['P90'] = '[P90] - $1061';
        ['RPG'] = '[RPG] - $6365';
        ['Rifle'] = '[Rifle] - $1644';
        ['SMG'] = '[SMG] - $796';
        ['Shotgun'] = '[Shotgun] - $1326';
        ['Tactical Shotgun'] = '[TacticalShotgun] - $1857';
    };

    ['Ammo'] = {
        ['LMG'] = '200 [LMG Ammo] - $318';
        ['AK-47'] = '90 [AK47 Ammo] - $85';
        ['Silencer AR'] = '120 [SilencerAR Ammo] - $80';
        ['Silencer'] = '25 [Silencer Ammo] - $53';
        ['Revolver'] = '12 [Revolver Ammo] - $80';
        ['AR'] = '100 [AR Ammo] - $80';
        ['AUG'] = '90 [AUG Ammo] - $85';
        ['Double-Barrel'] = '18 [Double-Barrel SG Ammo] - $53';
        ['Drum Gun'] = '100 [DrumGun Ammo] - $212';
        ['Flamethrower'] = '140 [Flamethrower Ammo] - $1644';
        ['Glock'] = '25 [Glock Ammo] - $64';
        ['P90'] = '120 [P90 Ammo] - $64';
        ['RPG'] = '5 [RPG Ammo] - $1061';
        ['Rifle'] = '5 [Rifle Ammo] - $265';
        ['SMG'] = '80 [SMG Ammo] - $64';
        ['Shotgun'] = '20 [Shotgun Ammo] - $64';
        ['Tactical Shotgun'] = '20 [TacticalShotgun Ammo] - $64';
    };

    ['Armor'] = {
        ['High'] = '[High-Medium Armor] - $2440';
        ['Medium'] = '[Medium Armor] - $1061';
        ['Fire'] = '[Fire Armor] - $2493';
    };
};

  local AssetTable = {
      Sounds = {
          ['None']         = '',
          ['OSU']          = 'rbxassetid://7147454322',
          ['Neverlose']    = 'rbxassetid://7216848832',
          ['Bameware']     = 'rbxassetid://3124331820',
          ['Hitmarker']    = 'rbxassetid://160432334',
          ['skeet']        = 'rbxassetid://4817809188',
          ['Rust']         = 'rbxassetid://5043539486',
          ['Lazer Beam']   = 'rbxassetid://130791043',
          ['Bow Hit']      = 'rbxassetid://1053296915',
          ['Bow']          = 'rbxassetid://3442683707',
          ['TF2 Hitsound'] = 'rbxassetid://3455144981',
          ['TF2 Critical'] = 'rbxassetid://296102734',
      };
      Textures = {
          ['Normal'] = 'rbxassetid://7151778302',
          ['Fog'] = 'rbxassetid://9150635648',
      };
  };
  
  local ItemTableValues = {Sounds = {}, Guns = {}, Ammo = {}}; do 
  
      for i, v in pairs(AssetTable.Sounds) do
          table.insert(ItemTableValues.Sounds, i)
      end

      for i, v in pairs(ItemTable.Guns) do 
        table.insert(ItemTableValues.Guns, i)
    end 

    for i, v in pairs(ItemTable.Ammo) do 
        table.insert(ItemTableValues.Ammo, i)
    end 
  
  end 
  
  local Settings = {
    ['AntiAim'] = {
        ['InvisibleDesync'] = { ['Enabled'] = false;
            ['X'] = {['Start'] = -16000; ['End'] = 16000;};
            ['Y'] = {['Start'] = -16000; ['End'] = 16000;};
            ['Z'] = {['Start'] = -16000; ['End'] = 16000;};
        }
    },

    ['Destroy Cheaters'] = {
        Enabled = false,
        Keybind = Enum.KeyCode.G,
    };

    ['Combat'] = {
        ['TargetLock'] = {
            Enabled = false,
            Predict = true,
            KeyBind = Enum.KeyCode.T,
            Prediction = 0.135,
            HitParts = 'HumanoidRootPart',
            NearestPart = false,
            HitPartMode = 'Nearest Point',
            Notifications = false,
        },
        ['Stuff'] = {
            LookAt = false,
            Spectate = false,
            Notification = false,
            AutoPrediction = true,
        },
        ['Checks'] = {
            Resolver = true,
            ResolverMethod = 'Recaculate',
            AimviewerBypass = true,
            NoGroundShots = true,
            Knocked = true,
            Grabbed = false,
            Friend = false,
            Crew = false,
            AntiCurve = true,
            WallCheck = true,
        },
        ['Visuals'] = {
            ['Line'] = {
                Enabled = true,
                Circle = true,
                Visible = true,
                Color = MainColor,
                Transparency = 1,
                Thickness = 2,
            },
            ['HighLight'] = {
                Enabled = true,
                Transparency = 0,
                FillColor = MainColor,
                OutLineColor = Color3.fromRGB(255, 255, 255),
            },
            ['BackTrack'] = {
                Enabled = true,
                Material = 'ForceField',
                Color = MainColor,
                Delay = 0.1,
                Transparency = 0,
            },
        },
    };
  
    ['Visuals'] = {
        ['Weapon_Chams'] = {
            Enabled = false,
            Material = Enum.Material.SmoothPlastic,
            Color = MainColor,
        },
        ['Character_Chams'] = {
            Enabled = false,
            Material = Enum.Material.ForceField,
            Color = MainColor,

            Trail = false,
            Trail_Color = MainColor,
            Trail_Life = 3,
        },
        ['World_Customization'] = {
            Enabled = false,

            Bars = false,
            BarsColor = MainColor,
        },
        ['Bullet_Trails'] = {
            Enabled = false,
            Magnitude = 12,
            Width = 1.7,
            Brightness = 5,
            Segments = 10,
            LightEmission = 10,
            Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(240, 175, 235)), ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 175, 235))}),
            Speed = 3,
            Texture = 'Normal', -- 12781803086
        },
        ['Hit_Detection'] = {
          Enabled = false,
  
          Notify = true,
          Clone = true,
          Pulse = false,
          Sound = true,
          HitSound = 'Rust',
        },
    };
  
    ['Misc'] = {
        ['Auto_Buy'] = {
            Gun = 'LMG',
        },
        ['Random'] = {
            AutoStomp = false,
            AntiBag = false,
            NoJumpCooldown = false,
            NoSlow = false,
            NoRecoil = false,
        },
        ['Cash'] = {
            AutoDrop = false,
            Amount = 8000,
            AutoPick = false,
        },
        ['NetworkAnti'] = {
            Enabled = false,
            Notification = true,
            Keybind = Enum.KeyCode.K
        },
        ['PredictionDisabler'] = {
            Enabled = false,
            KeyBind = Enum.KeyCode.X,
            Notifications = false,
            Errors = false,
            AutoWalkSpeed = false,
            AnimationSpeed = 21,
            WalkSpeed = 12,
        },
        ['TargetStrafe'] = {
            Enabled = false,
            Visualize_Circle = false,
            Color = Color3.fromRGB(255, 194, 254),
            Distance = 9,
            Speed = 1,
            Height = 0,
  
            Method = 'Strafe', -- Strafe, Randomize
            RandomizeMin = 2,
            RandomizeMax = 17,

            AutoFire = true,
            AutoReload = true,
        },
        ['Fly'] = {
            Enabled = false,
            Notification = false,
            KeyBind = Enum.KeyCode.X,
            Speed = 5 * 50,
        },
        ['WalkSpeed'] = {
            Enabled = false,
            Notifications = false,
            KeyBind = Enum.KeyCode.X,
            Speed = 1,
        },
        ['TrashTalk'] = {
            ['Use'] = {
                Enabled = false,
                Target = false,
                Notification = false,
                UsekeyBind = false,
                KeyBind = Enum.KeyCode.B,
                Method = "Misery",
            },
            ['Words'] = {
                Misery = {"do you have $$$$mmMMIIEERRY!!!", "MoveDirection isn't a resolver", "Skid🤣", "WHERE BRO AIMING AT!?", "Lost 2 Misery", "omg so bad", "imagine dying to me", "whats the point of playing with that aim🙏😂", "WOWZIES", "OH MY DAYS", "Misery'd", "1d luh bro", "WOW U SUCK", "Im right here😂", "couldnt be me", "just broke ur ankles", "UR ANKLES? GONE?", "destroyed", "LOL DESTROYED", "LOL"},
            },
        },
    };
  
    ['Configs'] = {
        Menu = {
            Keybind = Enum.KeyCode.P,
        },
    };
  };
  
  print("CheckPoint 3")
  
  
  getgenv().MethodBeingUsed = Settings.Misc.TrashTalk.Words.Misery
  
  -- // functions

function Script.Functions.Connection(event, func)
    return event:Connect(func)
end

local function DestroyCheaters()
    Settings['Destroy Cheaters'].Enabled = not Settings['Destroy Cheaters'].Enabled;

    if Settings['Destroy Cheaters'].Enabled then
        local Character = Client and Client.Character
        if Character then
            local RootPart = Character and Character:FindFirstChild('HumanoidRootPart')
            local Position = RootPart and RootPart.CFrame
    
            task.wait()

            while task.wait(2) do
                Desync.cframe = (RootPart.CFrame * CFrame.new(9e9, 0/0, 9e9))
        
                task.wait(1)
    
                Desync.cframe = Position
                task.wait()
                Desync.cframe = nil
            end

        end

    end
end

Script.Functions.Update_Desync = function(bool)
    Settings.AntiAim.InvisibleDesync.Enabled = bool 

    if (not bool) then 
        if (Script.Connections['Invisible Desync']) then 
            Script.Connections['Invisible Desync']:Disconnect()
            Script.Connections['Invisible Desync'] = nil 
        end

        setfflag('S2PhysicsSenderRate', 15)
        setfflag('PhysicsSenderMaxBandwidthBps', 38760)
        sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", false)
    end
end

Script.Functions.InvisibleDesync = function()   
    local NetworkShouldSleep = false
    if not Script.Connections["Invisible Desync"] then
        Script.Connections["Invisible Desync"] = Script.Functions.Connection(RunService.Heartbeat, function()
            if (not Settings.AntiAim.InvisibleDesync.Enabled) then return end 

            Script.Locals.NetworkShouldSleep = not Script.Locals.NetworkShouldSleep
            setfflag("S2PhysicsSenderRate", tostring(2)) 
            setfflag("PhysicsSenderMaxBandwidthBps", tostring(math.pi/3))

            sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", Script.Locals.NetworkShouldSleep)
            Script.Locals.OriginalVelocity[1] = Client.Character.HumanoidRootPart.Velocity
            Script.Locals.OriginalVelocity[2] = Client.Character.HumanoidRootPart.AssemblyLinearVelocity

            Client.Character.HumanoidRootPart.Velocity = Client.Character.HumanoidRootPart.Velocity + Vector3.new(math.random(Settings.AntiAim.InvisibleDesync.X['Start'], Settings.AntiAim.InvisibleDesync.X['End']), math.random(Settings.AntiAim.InvisibleDesync.Y['Start'], Settings.AntiAim.InvisibleDesync.Y['End']), math.random(Settings.AntiAim.InvisibleDesync.Z['Start'], Settings.AntiAim.InvisibleDesync.Z['End']))
            Client.Character.HumanoidRootPart.AssemblyLinearVelocity = Client.Character.HumanoidRootPart.AssemblyLinearVelocity + Vector3.new(math.random(Settings.AntiAim.InvisibleDesync.X['Start'], Settings.AntiAim.InvisibleDesync.X['End']), math.random(Settings.AntiAim.InvisibleDesync.Y['Start'], Settings.AntiAim.InvisibleDesync.Y['End']), math.random(Settings.AntiAim.InvisibleDesync.Z['Start'], Settings.AntiAim.InvisibleDesync.Z['End']))

            RunService.RenderStepped:Wait()

            Client.Character.HumanoidRootPart.Velocity = Script.Locals.OriginalVelocity[1]
            Client.Character.HumanoidRootPart.AssemblyLinearVelocity = Script.Locals.OriginalVelocity[2]
            setfflag("S2PhysicsSenderRate", tostring(1))
            NetworkShouldSleep = not NetworkShouldSleep
        end)
    end
    RunService.RenderStepped:Wait()
    sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", NetworkShouldSleep)
    setfflag("S2PhysicsSenderRate", tostring(15))
end

Script.Functions.InvisibleDesync()

local function ToggleTrail(Bool)
    for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if v:IsA("BasePart") then
            if Bool then
                local BlaBla = Instance.new("Trail", v)
                BlaBla.Texture = "rbxassetid://1390780157"
                BlaBla.Parent = v
                local Pointer1 = Instance.new("Attachment", v)
                Pointer1.Name = "Pointer1"
                local Pointer2 = Instance.new("Attachment", game.Players.LocalPlayer.Character.HumanoidRootPart)
                Pointer2.Name = "Pointer2"
                BlaBla.Attachment0 = Pointer1
                BlaBla.Attachment1 = Pointer2
                BlaBla.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Settings.Visuals.Character_Chams.Trail_Color), ColorSequenceKeypoint.new(1, Settings.Visuals.Character_Chams.Trail_Color)});
                BlaBla.Lifetime = Settings.Visuals.Character_Chams.Trail_Life
                BlaBla.Name = "BlaBla" -- Set the name
            else
                for _, child in ipairs(v:GetChildren()) do
                    if child:IsA("Trail") and child.Name == 'BlaBla' then -- Corrected the condition
                        child:Destroy()
                    end
                end
            end
        end
    end
end

local function AutoBuy(Obj, Ammo, Amount)
    local Character = Client and (Client.Character or Client.CharacterAdded:Wait())
    local RootPart  = Character and Character.HumanoidRootPart
    local RootPos   = RootPart.CFrame

    local ObjectPath = Workspace.Ignored.Shop[Obj]
    local ClickDet   = ObjectPath.ClickDetector

    if Character and Ammo then
        for i = 1, Amount do
            RootPart.CFrame = ObjectPath.Head.CFrame
            task.wait(0.3)
            fireclickdetector(ClickDet)
            task.wait(0.15)
        end

        RootPart.CFrame = RootPos
    else
        RootPart.CFrame = ObjectPath.Head.CFrame
        task.wait(0.15)
        fireclickdetector(ClickDet)
        task.wait(0.15)
        RootPart.CFrame = RootPos
    end
end


  function Alive(Player)
    if Player and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") ~= nil and Player.Character:FindFirstChild("Humanoid") ~= nil and Player.Character:FindFirstChild("Head") ~= nil then
        return true
    end
    return false
  end
  
  local function GetTool()
    local Character = Client.Character 
    local Tool = nil 

    if (not Character) then 
        return Tool
    end

    for _, v in pairs(Character:GetChildren()) do 
        if (not v:IsA('Tool')) then continue end 

        if (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then 
            Tool = v 
        end
    end

    return Tool
end
  
  function findPlayerByUsername(username)
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Name == username then
            return player
        end
    end
    return nil  -- Player not found
  end

  local function FindPlayer(Player)
    for i, v in pairs(Players:GetPlayers()) do
        if (v.Name:lower():find(Player:lower())) then
            if v.Name == Client.name then continue end
            return v
        end
    end
end

  
  
  --\\ Ui
  local Menu = loadstring(req({Url = "https://raw.githubusercontent.com/Hxckerskyy/miserycc.lua/main/menu.lua", Method = "Get"}).Body)(); -- WYVJcRAt

    local function MenuNameUpdate()
        while (task.wait()) do
            local Name, PlaceHolder = 'Misery', ''
            for i = 1, #Name do --try
                local Character = string.sub(Name, i, i)
                PlaceHolder = PlaceHolder .. Character
                Menu:SetTitle(PlaceHolder .. '<font color="#' .. tostring(Menu.Accent:ToHex()) .. '">.cc</font>')
                task.wait(.25)
            end
        end
    end
  
    --// functions
    local function MenuToggle(Action_Name: string, State: EnumItem, Input: InputObject)
        if not State or State == Enum.UserInputState.Begin then
            Menu:SetVisible(not Menu.IsVisible)
        end
    end
  
    task.spawn(MenuNameUpdate)
  
    Menu.Accent = MainColor

    Menu.Keybinds = Menu.Keybinds() do
        Menu.Keybinds.Add('Fly', Settings.Misc.Fly.Enabled and 'On' or 'Off')
        Menu.Keybinds.Add('CFrame', Settings.Misc.WalkSpeed.Enabled and 'On' or 'Off')
        Menu.Keybinds.Add('Prediction Breaker', Settings.Misc.PredictionDisabler.Enabled and 'On' or 'Off')
    end

    Menu.Indicators = Menu.Indicators() do
        Menu.Indicators.Add('Target', 'Text', 'nil')
        Menu.Indicators.Add('Target Health', 'Bar', 50, 0, 100) -- Value, Min, Max
        Menu.Indicators.Add('Target Armor', 'Bar', 100, 0, 200) -- Value, Min, Max

        Menu.Indicators.Add('Knocked Out', 'Text', 'True')
        Menu.Indicators.Add('Anti Aiming', 'Text', 'True')
        Menu.Indicators.Add('Target Ammo', 'Bar', 50, 0, 200) -- Value, Min, Max
        --Menu.Indicators:SetPosition(UDim2.new(0, 39, 0, 281))
    end
    Menu.Watermark()
    Menu.Watermark:Update('Misery<font color="#' .. tostring(Menu.Accent:ToHex()) .. '">.cc</font>') -- please fix this and we can add a variable for a color.
  
    local Window = Menu:SetTitle('Misery') do
  
        local CombatTab = Menu.Tab("Main") do
  
            local TargetAimSection = Menu.Container("Main", "Target Aim", "Left") do
                Menu.CheckBox("Main", "Target Aim", "Enabled", false, function(a)
                    Settings.Combat.TargetLock.Enabled = a
                end)
                Menu.Hotkey("Main", "Target Aim", "Keybind", Enum.KeyCode.T, function(a)
                    Settings.Combat.TargetLock.KeyBind = a
                end)
                Menu.CheckBox("Main", "Target Aim", "Look At", false, function(a)
                    Settings.Combat.Stuff.LookAt = a
                end)
                Menu.CheckBox("Main", "Target Aim", "Spectate", false, function(a)
                    Settings.Combat.Stuff.Spectate = a
                end)
                Menu.CheckBox("Main", "Target Aim", "Notification", false, function(a)
                    Settings.Combat.Stuff.Notification = a
                end)
            end
  
            local HitPartSection = Menu.Container("Main", "HitPart", "Left") do
                Menu.CheckBox("Main", "HitPart", "NearestPart", false, function(a)
                    Settings.Combat.TargetLock.NearestPart = a
                end)
                Menu.ComboBox("Main", "HitPart", "NearestPart Mode", "Nearest Part", {"Nearest Point", "Nearest Part"}, function(a)
                    Settings.Combat.TargetLock.HitPartMode = a
                end)
                Menu.ComboBox("Main", "HitPart", "HitPart", "HumanoidRootPart", {"Head", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg", "UpperTorso", "HumanoidRootPart", "LeftUpperLeg", "RightLowerLeg", "RightFoot", "LowerTorso"}, function(a)
                    Settings.Combat.TargetLock.HitParts = a
                end)
            end
  
            local PredictionSection = Menu.Container("Main", "Prediction", "Left") do
                Menu.CheckBox("Main", "Prediction", "Enabled", true, function(a)
                    Settings.Combat.TargetLock.Predict = a
                end)
                Menu.CheckBox("Main", "Prediction", "Auto Prediction", true, function(a)
                    Settings.Combat.Stuff.AutoPrediction = a
                end)
                Menu.TextBox("Main", "Prediction", "Prediction", '0.135', function(a)
                    Settings.Combat.TargetLock.Prediction = a
                end)
            end
  
            local ChecksSection = Menu.Container("Main", "Checks", "Left") do
                Menu.CheckBox("Main", "Checks", "No Ground Shots", true, function(a)
                    Settings.Combat.Checks.NoGroundShots = a
                end)
                Menu.CheckBox("Main", "Checks", "Anti Curve", true, function(a)
                    Settings.Combat.Checks.AntiCurve = a
                end)
                Menu.CheckBox("Main", "Checks", "Knocked Check", true, function(a)
                    Settings.Combat.Checks.Knocked = a
                end)
                Menu.CheckBox("Main", "Checks", "Grabbed Check", false, function(a)
                    Settings.Combat.Checks.Grabbed = a
                end)
                Menu.CheckBox("Main", "Checks", "Crew Check", false, function(a)
                    Settings.Combat.Checks.Crew = a
                end)
                Menu.CheckBox("Main", "Checks", "Aim Viewer Bypass", true, function(a)
                    print(a)
                end)
                Menu.CheckBox("Main", "Checks", "Resolver", true, function(a)
                    print(a)
                end)
                Menu.CheckBox("Main", "Checks", "Friend Check", false, function(a)
                    Settings.Combat.Checks.Friend = a
                end)
                Menu.CheckBox("Main", "Checks", "Wall Check", true, function(a)
                    Settings.Combat.Checks.WallCheck = a
                end)
            end
  
            local TSSection = Menu.Container("Main", "Target Strafe", "Right") do
                Menu.CheckBox("Main", "Target Strafe", "Enabled", false, function(a)
                    Settings.Misc.TargetStrafe.Enabled = a
                end)
                Menu.ComboBox("Main", "Target Strafe", "Method", "Strafe", {"Strafe", "Randomize"}, function(a)
                  Settings.Misc.TargetStrafe.Method = a
              end)
                Menu.CheckBox("Main", "Target Strafe", "Visualize", false, function(a)
                    Settings.Misc.TargetStrafe.Visualize_Circle = a
                end)
                Menu.CheckBox("Main", "Target Strafe", "Auto Fire", true, function(a)
                    Settings.Misc.TargetStrafe.AutoFire = a
                end)
                Menu.CheckBox("Main", "Target Strafe", "Auto Reload", true, function(a)
                    Settings.Misc.TargetStrafe.AutoReload = a
                end)
                Menu.ColorPicker("Main", "Target Strafe", "Color", MainColor, 0, function(a)
                    Settings.Misc.TargetStrafe.Color = a
                end)
                Menu.Slider("Main", "Target Strafe", "Distance", 0, 50, 9, '', 1, function(a)
                    Settings.Misc.TargetStrafe.Distance = a
                end)
                Menu.Slider("Main", "Target Strafe", "Speed", 0, 15, 1, '', 1, function(a)
                    Settings.Misc.TargetStrafe.Speed = a
                end)
                Menu.Slider("Main", "Target Strafe", "Height", 0, 15, 0, '', 1, function(a)
                    Settings.Misc.TargetStrafe.Height = a
                end)
                Menu.Slider('Main', 'Target Strafe', 'Teleport Min', 1, 20, 2, '', 1, function(Value)
                  Settings.Misc.TargetStrafe.RandomizeMin = Value
              end)
              Menu.Slider('Main', 'Target Strafe', 'Teleport Max', 2, 40, 17, '', 1, function(Value)
                  Settings.Misc.TargetStrafe.RandomizeMax = Value
              end)
  
            end
  
            local HitDetectionSection = Menu.Container("Main", "Hit Detection", "Right") do
              Menu.CheckBox("Main", "Hit Detection", "Enabled", false, function(a)
                  Settings.Visuals.Hit_Detection.Enabled = a
              end)
              Menu.CheckBox("Main", "Hit Detection", "Hit Sound", false, function(a)
                  Settings.Visuals.Hit_Detection.Sound = a
              end)
              Menu.CheckBox("Main", "Hit Detection", "Notify", false, function(a)
                  Settings.Visuals.Hit_Detection.Notify = a
              end)
              Menu.ComboBox('Main', 'Hit Detection', 'Sounds', 'Rust', ItemTableValues.Sounds, function(self)
                  Settings.Visuals.Hit_Detection.HitSound = self
              end)
              Menu.MultiSelect('Main', 'Hit Detection', 'Hit Effects', {
                  ['Clone'] = Settings.Visuals.Hit_Detection.Clone,
                  ['Pulse'] = Settings.Visuals.Hit_Detection.Pulse,
              }, function(Selection)
                  Settings.Visuals.Hit_Detection.Clone = Selection['Clone']
                  Settings.Visuals.Hit_Detection.Pulse = Selection['Pulse']
              end)
  
            end
  
  
        end
  
        local MiscTab = Menu.Tab("Misc") do
  
            local MTSection1 = Menu.Container("Misc", "Prediction Breaker", "Left") do
                Menu.CheckBox("Misc", "Prediction Breaker", "Enabled", false, function(a)
                    Settings.Misc.PredictionDisabler.Enabled = a
                end)
                Menu.Hotkey("Misc", "Prediction Breaker", "Keybind", Enum.KeyCode.X, function(a)
                    Settings.Misc.PredictionDisabler.KeyBind = a
                end)
                Menu.CheckBox("Misc", "Prediction Breaker", "Notifications", false, function(a)
                    Settings.Misc.PredictionDisabler.Notifications = a
                end)
                Menu.CheckBox("Misc", "Prediction Breaker", "Errors", false, function(a)
                    Settings.Misc.PredictionDisabler.Errors = a
                end)
                Menu.CheckBox("Misc", "Prediction Breaker", "Auto Settings", false, function(a)
                    Settings.Misc.PredictionDisabler.AutoWalkSpeed = a
                end)
                Menu.Slider("Misc", "Prediction Breaker", "Animation Speed", 0, 50, 21, '%', 1, function(a)
                    Settings.Misc.PredictionDisabler.AnimationSpeed = a
                end)
                Menu.Slider("Misc", "Prediction Breaker", "Walk Speed", 0, 50, 12, '%', 1, function(a)
                    Settings.Misc.PredictionDisabler.WalkSpeed = a
                end)
            end
  
            local MTSection2 = Menu.Container("Misc", "CFrame Speed", "Right") do
                Menu.CheckBox("Misc", "CFrame Speed", "Enabled", false, function(a)
                    Settings.Misc.WalkSpeed.Enabled = a
                end)
                Menu.Hotkey("Misc", "CFrame Speed", "Keybind", Enum.KeyCode.X, function(a)
                    Settings.Misc.WalkSpeed.KeyBind = a
                end)
                Menu.CheckBox("Misc", "CFrame Speed", "Notification", false, function(a)
                    Settings.Misc.WalkSpeed.Notifications = a
                end)
                Menu.Slider("Misc", "CFrame Speed", "Speed", 0, 10, 3, '%', 1, function(a)
                    Settings.Misc.WalkSpeed.Speed = a
                end)
            end
  
            local MTSection3 = Menu.Container("Misc", "Fly", "Right") do
                Menu.CheckBox("Misc", "Fly", "Enabled", false, function(a)
                    Settings.Misc.Fly.Enabled = a
                end)
                Menu.Hotkey("Misc", "Fly", "Keybind", Enum.KeyCode.X, function(a)
                    Settings.Misc.Fly.KeyBind = a
                end)
                Menu.CheckBox("Misc", "Fly", "Notification", false, function(a)
                    Settings.Misc.Fly.Notification = a
                end)
                Menu.Slider("Misc", "Fly", "Speed", 0, 30, 5, '%', 1, function(a)
                    Settings.Misc.Fly.Speed = a * 50
                end)
            end
  
            local MTSection4 = Menu.Container("Misc", "Trash Talk", "Left") do
                Menu.CheckBox("Misc", "Trash Talk", "Enabled", false, function(a)
                    Settings.Misc.TrashTalk.Use.Enabled = a
                end)
                Menu.CheckBox("Misc", "Trash Talk", "Target", false, function(a)
                    Settings.Misc.TrashTalk.Use.Target = a
                end)
                Menu.CheckBox("Misc", "Trash Talk", "Notification", false, function(a)
                    Settings.Misc.TrashTalk.Use.Notification = a
                end)
                Menu.CheckBox("Misc", "Trash Talk", "Use Keybind", false, function(a)
                    Settings.Misc.TrashTalk.Use.UsekeyBind = a
                end)
                Menu.Hotkey("Misc", "Trash Talk", "Keybind", Enum.KeyCode.B, function(a)
                    Settings.Misc.TrashTalk.Use.KeyBind = a
                end)
            end
  
            local MTSection4 = Menu.Container("Misc", "Network Anti", "Left") do
                Menu.CheckBox("Misc", "Network Anti", "Enabled", false, function(a)
                    Settings.Misc.NetworkAnti.Enabled = a
                end)
                Menu.Hotkey("Misc", "Network Anti", "Keybind", Enum.KeyCode.K, function(a)
                    Settings.Misc.NetworkAnti.KeyBind = a
                end)
                Menu.CheckBox("Misc", "Network Anti", "Notification", false, function(a)
                    Settings.Misc.NetworkAnti.Notification = a
                end)
            end
  
            local MTSection5 = Menu.Container("Misc", "Teleport", "Right") do
                Menu.ComboBox("Misc", "Teleport", "Place :", "Choose", {"Admin Base","Military","Revolver","High Medium Armor","Food","Gas Station","School","Ufo","Bank","Gym Top","Casino","Uphill","PlayGround","Flank"}, function(State)
                    local CFrameValues = {
                        ["Admin Base"] = CFrame.new(-874.903992, -32.6492004, -525.215698),
                        ["High Medium Armor"] = CFrame.new(-934.73651123047, -28.492471694946, 565.99884033203),
                        ["Food"] = CFrame.new(-788.39318847656, -39.649200439453, -935.27795410156),
                        ["Gas Station"] = CFrame.new(608.599426, 65.3087997, -267.643066, -0.414288431, -1.04483455e-09, -0.91014564, -1.30518893e-08, 1, 4.79309215e-09, 0.91014564, 1.38648408e-08, -0.41428),
                        ["School"] = CFrame.new(-581.790283, 68.4947281, 331.046448, 0.220051467, -7.56681329e-05, 0.975498199, -3.96428077e-05, 0.999999583, 8.65130132e-05, -0.975498199, -5.77078645e-05, 0.22005),
                        ["Military"] = CFrame.new(92.643799, 122.749977, -860.128784, 0.986730993, 5.09704545e-09, 0.162363499, -9.24942123e-10, 1, -2.57716568e-08, -0.162363499, 2.52795154e-08, 0.986730993),
                        ["Ufo"] = CFrame.new(65.1504517, 138.999954, -691.819031, -0.935115993, -5.9791418e-08, -0.354341775, -3.10840989e-08, 1, -8.67077574e-08, 0.354341775, -7.0067415e-08, -0.935115993),
                        ["Bank"] = CFrame.new(-374.538391, 102.052887, -440.20871, 0.958144963, 9.24065989e-06, -0.286283433, -9.98981818e-07, 1, 2.89345699e-05, 0.286283433, -2.74375216e-05, 0.958144963),
                        ["Gym Top"] = CFrame.new(-76.178093, 56.6998138, -629.940979, -0.9998914, -1.09370752e-07, 0.0147391548, -1.0945012e-07, 1, -4.57786342e-09, -0.0147391548, -6.1905685e-09, -0.9998914),
                        ["Casino"] = CFrame.new(-1048.95093, 110.254997, -154.554016, 0.198458344, 0.0412604436, -0.979240835, -4.06676299e-05, 0.999113858, 0.0420895219, 0.98010987, -0.00831318926, 0.198284075),
                        ["Uphill"] = CFrame.new(485.651947, 112.5, -644.316833, -0.998899043, 1.33881997e-06, 0.0469136797, 8.00526664e-07, 1, -1.14929126e-05, -0.0469136797, -1.14426994e-05, -0.998899043),
                        ["Revolver"] = CFrame.new(-659.053162, 110.748001, -158.224365, 0.146754071, -2.38941595e-08, -0.989172995, -1.60316838e-09, 1, -2.43935396e-08, 0.989172995, 5.16566212e-09, 0.146754071),
                        ["Flank"] = CFrame.new(376.730621, 130.748001, -245.620468, 0.996583343, 5.90310174e-06, -0.0825867951, -1.72590728e-06, 1, 5.06508768e-05, 0.0825867951, -5.03353003e-05, 0.996583343),
                        ["PlayGround"] = CFrame.new(-260.836182, 126.424866, -877.783875, -0.977067351, -1.56508904e-05, -0.212922528, 9.92513264e-07, 1, -7.80593255e-05, 0.212922528, -7.64806027e-05, -0.977067351),
                    }
  
                if CFrameValues[State] then
                    Client.Character.HumanoidRootPart.CFrame = CFrameValues[State]
                end
                end)
            end

            local AutoBuySection = Menu.Container('Misc', 'Buy', 'Right') do

                Menu.ComboBox('Misc', 'Buy', 'Gun', 'LMG', ItemTableValues.Guns, function(self)
                    Settings.Misc.Auto_Buy.Gun = self
                end)
                Menu.Button('Misc', 'Buy', 'Buy Gun', function()
                    AutoBuy(ItemTable.Guns[Settings.Misc.Auto_Buy.Gun], false, 2)
                end)

                Menu.Button('Misc', 'Buy', 'Buy Ammo', function()
                    AutoBuy(ItemTable.Ammo[Settings.Misc.Auto_Buy.Gun], true, 1)
                end)

            end
  
            local MTSection6 = Menu.Container("Misc", "Stuff", "Left") do
                Menu.CheckBox("Misc", "Stuff", "Auto Grab Cash", false, function(a)
                    Settings.Misc.Cash.AutoPick = a
                end)
                Menu.CheckBox("Misc", "Stuff", "Auto Drop Cash", false, function(a)
                    Settings.Misc.Cash.AutoDrop = a
                end)
                Menu.Slider("Misc", "Stuff", "Auto Drop Amount", 0, 10, 6, '%', 1, function(a)
                    Settings.Misc.Cash.Amount = a * 1000
                end)
                Menu.CheckBox("Misc", "Stuff", "Auto Stomp", false, function(a)
                    Settings.Misc.Random.AutoStomp = a
                end)
                
                Menu.CheckBox("Misc", "Stuff", "No Recoil", false, function(a)
                  Settings.Misc.Random.NoRecoil = a
              end)
  
              Menu.CheckBox("Misc", "Stuff", "No Slow", false, function(a)
                  Settings.Misc.Random.NoSlow = a
              end)
  
                Menu.CheckBox("Misc", "Stuff", "No Jump cooldown", false, function(a)
                    if a then
                        local IsA = game.IsA
                        local newindex = nil
  
                        newindex = hookmetamethod(game, "__newindex", function(self, Index, Value)
                            if not checkcaller() and IsA(self, "Humanoid") and Index == "JumpPower" then
                                return
                            end
                            return newindex(self, Index, Value)
                        end)
                    end
                end)
                Menu.CheckBox("Misc", "Stuff", "Anti Bag", false, function(a)
                    Settings.Misc.Random.AntiBag = a
                end)
                Menu.CheckBox("Misc", "Stuff", "Bunny Hop", false, function(a)
                    getgenv().Bhop = a
                    while getgenv().Bhop do
                        task.wait()
                        if Client.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                            Client.Character.Humanoid:ChangeState("Jumping")
                        end
                    end
                end)
            end

            local MTSection9 = Menu.Container("Misc", "Desync", "Left") do
                Menu.CheckBox("Misc", "Desync", "Invisible Desync", false, function(a)

                    for i = 1, 2 do 
                        Script.Functions.Update_Desync(a)
                        task.wait(.1)
                    end

                end)

                Menu.CheckBox("Misc", "Desync", "CFrame Desync", false, function(a)
                    Settings['Destroy Cheaters'].Enabled = a
                    DestroyCheaters()
                end)

                Menu.Hotkey("Misc", "Desync", "Keybind", Settings['Destroy Cheaters'].Keybind, function(a)
                    Settings['Destroy Cheaters'].Keybind = a
                    DestroyCheaters()
                end)

            end
        end
  
        local VisualsTab = Menu.Tab("Visuals") do
  
            local TLHightlightSection = Menu.Container("Visuals", "ESP", "Left") do
                Menu.CheckBox("Visuals", "ESP", "Enabled", false, function(a)
                    getgenv().esp.Enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Box", true, function(a)
                    getgenv().esp.BoxEnabled = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "Box Color", Color3.fromRGB(255, 255, 255), 0, function(a)
                    getgenv().esp.BoxColor = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "Text Color", Color3.fromRGB(255, 255, 255), 0, function(a)
                    getgenv().esp.TextColor = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Name", true, function(a)
                    getgenv().esp.TextLayout.name.enabled = a
                end)
                
                Menu.CheckBox("Visuals", "ESP", "Health", true, function(a)
                    getgenv().esp.TextLayout.health.enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "HealthBar", true, function(a)
                    getgenv().esp.BarLayout.health.enabled = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "LowerHealthColor", Color3.fromRGB(255, 255, 255), 0, function(a)
                    getgenv().esp.BarLayout.health.color_empty = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "HigherHealthColor", Color3.fromRGB(255, 102, 204), 0, function(a)
                    getgenv().esp.BarLayout.health.color_full = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Armor", true, function(a)
                    getgenv().esp.TextLayout.armor.enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "ArmorBar", true, function(a)
                    getgenv().esp.BarLayout.armor.enabled = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "LowerArmorColor", Color3.fromRGB(255, 102, 204), 0, function(a)
                    getgenv().esp.BarLayout.armor.color_empty = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "HigherArmorColor", Color3.fromRGB(255, 102, 204), 0, function(a)
                    getgenv().esp.BarLayout.armor.color_full = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Distance", true, function(a)
                    getgenv().esp.TextLayout.distance.enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Tool", true, function(a)
                    getgenv().esp.TextLayout.tool.enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Skeletons", false, function(a)
                    getgenv().esp.SkeletonEnabled = a
                end)

                Menu.CheckBox("Visuals", "ESP", "Chams", false, function(a)
                    getgenv().esp.ChamsEnabled = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "ChamsInnerColor", Color3.fromRGB(255, 102, 204), 0, function(a)
                    getgenv().esp.ChamsInnerColor = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "ChamsOuterColor", Color3.fromRGB(255, 255, 255), 0, function(a)
                    getgenv().esp.ChamsOuterColor = a
                end)
            end
  
            local Section6 = Menu.Container("Visuals", "World Customization", "Left") do
                Menu.CheckBox("Visuals", "World Customization", "Enabled", false, function(self)
                    Settings.Visuals.World_Customization.Enabled = self
                end)
                Menu.ColorPicker("Visuals", "World Customization", "World Customization", MainColor, 0, function(self)
                    task.spawn(function()
                        while task.wait() do
                            if Settings.Visuals.World_Customization.Enabled then
                                Lighting.ColorCorrection.TintColor = self
                            else
                                Lighting.ColorCorrection.TintColor = Color3.fromRGB(255, 255, 255)
                            end
                        end
                    end)
                end)

                Menu.CheckBox("Visuals", "World Customization", "UI", false, function(self)
                    Settings.Visuals.World_Customization.Bars = self
                end)
                Menu.ColorPicker("Visuals", "World Customization", "World Customization", MainColor, 0, function(self)
                    Settings.Visuals.World_Customization.BarsColor = self
                end)
            end
  
            local Section7 = Menu.Container("Visuals", "Crosshair", "Right") do
              Menu.CheckBox("Visuals", "Crosshair", "Enabled", false, function(a)
                  getgenv().crosshair.enabled = a
              end)
              Menu.ColorPicker("Visuals", "Crosshair", "Color", MainColor, 0, function(a)
                  getgenv().crosshair.color = a
              end)
              Menu.ComboBox("Visuals", "Crosshair", "Position", "mouse", {"mouse", "center"}, function(a)
                  getgenv().crosshair.mode = a
              end)
  
              Menu.Slider('Visuals', 'Crosshair', 'Width', 1, 5, 2.5, '', 1, function(self)
                  getgenv().crosshair.width = self
              end)
              Menu.Slider('Visuals', 'Crosshair', 'Length', 1, 50, 10, '', 0, function(self)
                  getgenv().crosshair.length = self
              end)
              Menu.Slider('Visuals', 'Crosshair', 'Radius', 0, 20, 11, '', 1, function(self)
                  getgenv().crosshair.radius = self
              end)
  
              Menu.CheckBox('Visuals', 'Crosshair', 'Spin', getgenv().crosshair.spin, function(self)
                  getgenv().crosshair.spin = self
              end)
              Menu.Slider('Visuals', 'Crosshair', 'Spin Speed', 1, 340, 150, '', 0, function(self)
                  getgenv().crosshair.spin_speed = self
              end)
  
              Menu.CheckBox('Visuals', 'Crosshair', 'Resize', getgenv().crosshair.resize, function(self)
                  getgenv().crosshair.resize = self
              end)
              Menu.Slider('Visuals', 'Crosshair', 'Resize Speed', 1, 22, 5, '', 0, function(self)
                  getgenv().crosshair.resize_speed = self
              end)
          end
  
            local TLHightlightSection = Menu.Container("Visuals", "HighLight", "Right") do
                Menu.CheckBox("Visuals", "HighLight", "Enabled", true, function(a)
                    Settings.Combat.Visuals.HighLight.Enabled = a
                end)
                Menu.ColorPicker("Visuals", "HighLight", "Fill Color", MainColor, 0, function(a)
                    Settings.Combat.Visuals.HighLight.FillColor = a
                end)
                Menu.ColorPicker("Visuals", "HighLight", "OutLine Color", Color3.fromRGB(255, 255, 255), 0, function(a)
                    Settings.Combat.Visuals.HighLight.OutLineColor = a
                end)
            end
  
            local TLBackTrackSection = Menu.Container("Visuals", "BackTrack", "Right") do
                Menu.CheckBox("Visuals", "BackTrack", "Enabled", true, function(a)
                    Settings.Combat.Visuals.BackTrack.Enabled = a
                end)
                Menu.Slider("Visuals", "BackTrack", "Transparency", 0, 1, 0, '', 1, function(a)
                    Settings.Combat.Visuals.BackTrack.Transparency = a
                end)
                Menu.Slider("Visuals", "BackTrack", "Delay", 0, 5, 0.1, '', 1, function(a)
                    Settings.Combat.Visuals.BackTrack.Delay = a
                end)
                Menu.ColorPicker("Visuals", "BackTrack", "Color", MainColor, 0, function(a)
                    Settings.Combat.Visuals.BackTrack.Color = a
                end)
                Menu.ComboBox("Visuals", "BackTrack", "Material", "ForceField", {"ForceField", "Neon", "Plastic"}, function(a)
                    Settings.Combat.Visuals.BackTrack.Material = a
                end)
            end
  
            local TLLineSection = Menu.Container("Visuals", "Line", "Right") do
                Menu.CheckBox("Visuals", "Line", "Enabled", true, function(a)
                    Settings.Combat.Visuals.Line.Visible = a
                end)
                Menu.CheckBox("Visuals", "Line", "Circle", true, function(a)
                    Settings.Combat.Visuals.Line.Circle = a
                end)
                Menu.Slider("Visuals", "Line", "Transparency", 0, 1, 0, '', 1, function(a)
                    Settings.Combat.Visuals.Line.Transparency = a
                end)
                Menu.Slider("Visuals", "Line", "Thickness", 0, 5, 0.5, '', 1, function(a)
                    Settings.Combat.Visuals.Line.Thickness = a
                end)
                Menu.ColorPicker("Visuals", "Line", "Color", MainColor, 0, function(a)
                    Settings.Combat.Visuals.Line.Color = a
                end)
            end
  
            local Section8 = Menu.Container("Visuals", "Bullet Tracers", "Right") do
                Menu.CheckBox("Visuals", "Bullet Tracers", "Enabled", false, function(self)
                    Settings.Visuals.Bullet_Trails.Enabled = self
                end)
  
                Menu.ComboBox("Visuals", "Bullet Tracers", "Texture", "Normal", {"Normal", "Fog"}, function(self)
                    Settings.Visuals.Bullet_Trails.Texture = self
                end)
  
                Menu.ColorPicker("Visuals", "Bullet Tracers", "Color", MainColor, 0, function(self)
                    Settings.Visuals.Bullet_Trails.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, self), ColorSequenceKeypoint.new(1, self)})
                end)
            end
  
            local Section8 = Menu.Container("Visuals", "Aim Viewer", "Right") do
              Menu.CheckBox("Visuals", "Aim Viewer", "Enabled", false, function(self)
                AntiAimViewer_Enabled = self
              end)
  
              Menu.ColorPicker("Visuals", "Aim Viewer", "Color", MainColor, 0, function(self)
                AntiAimViewer_Color = self
              end)
  
              Menu.TextBox("Visuals", "Aim Viewer", "Target", 'Username', function(self)
                AntiAimViewer_Target = findPlayerByUsername(self)
              end)
  
              Menu.CheckBox("Visuals", "Aim Viewer", "HighLight", false, function(self)
                AntiAimViewer_HighLight = self
              end)
  
              Menu.ColorPicker("Visuals", "Aim Viewer", "Color", Color3.fromRGB(255, 255, 255), 0, function(self)
                AntiAimViewer_HighLight_OutLineColor = self
              end)
  
              Menu.ColorPicker("Visuals", "Aim Viewer", "Color", MainColor, 0, function(self)
                AntiAimViewer_HighLight_FillColor = self
              end)
          end
  
          local Section7 = Menu.Container("Visuals", "Client Chams", "Left") do
            Menu.CheckBox("Visuals", "Client Chams", "Weapon Enabled", false, function(self)
                Settings.Visuals.Weapon_Chams.Enabled = self
            end)
            Menu.ColorPicker("Visuals", "Client Chams", "Weapon Color", MainColor, 0, function(self)
                Settings.Visuals.Weapon_Chams.Color = self
            end)
            Menu.ComboBox("Visuals", "Client Chams", "Weapon Cham Type", "Plastic", {"Plastic", "Neon"}, function(self)
                if self == 'Plastic' then
                    Settings.Visuals.Weapon_Chams.Material = Enum.Material.SmoothPlastic
                elseif self == 'Neon' then
                    Settings.Visuals.Weapon_Chams.Material = Enum.Material.Neon
                end
            end)

            Menu.CheckBox("Visuals", "Client Chams", "Client Enabled", false, function(self)
                Settings.Visuals.Character_Chams.Enabled = self
            end)
            Menu.ColorPicker("Visuals", "Client Chams", "Client Color", MainColor, 0, function(self)
                Settings.Visuals.Character_Chams.Color = self
            end)
            Menu.ComboBox("Visuals", "Client Chams", "Client Cham Type", "Force Field", {"Force Field", "Neon"}, function(self)
                if self == 'Force Field' then
                    Settings.Visuals.Character_Chams.Material = Enum.Material.ForceField
                elseif self == 'Neon' then
                    Settings.Visuals.Character_Chams.Material = Enum.Material.Neon
                end
            end)

            Menu.CheckBox("Visuals", "Client Chams", "Trail Enabled", false, function(self)
                ToggleTrail(self)
            end)
            Menu.ColorPicker("Visuals", "Client Chams", "Trail Color", MainColor, 0, function(self)
                Settings.Visuals.Character_Chams.Trail_Color = self
            end)
            Menu.Slider("Visuals", "Client Chams", "Trail Life", 1, 10, 3, '', 0, function(a)
                Settings.Combat.Visuals.Line.Trail_Life = a
            end)
        end
  
        end
  
        local ConfigsTab = Menu.Tab("Configuration") do
  
            local MenuSection = Menu.Container("Configuration", "Menu", "Left") do
                Menu.Hotkey('Configuration', 'Menu', 'Menu key', Settings.Configs.Menu.Keybind, function(a)
                    Settings.Configs.Menu.Keybind = a
                    ContextAction:BindAction('menuToggle', MenuToggle, true, a)
                end)

                Menu.ColorPicker("Configuration", "Menu", "Color", MainColor, 0, function(self)
                    MainColor = self
                    Menu.Accent = self
                end)
        
                Menu.CheckBox('Configuration', 'Menu', 'Indicators', false, function(Boolean)
                    Menu.Indicators:SetVisible(Boolean)
                end)
        
                Menu.CheckBox('Configuration', 'Menu', 'Keybinds', false, function(Boolean)
                    Menu.Keybinds:SetVisible(Boolean)
                end)
        
                Menu.Button('Configuration', 'Menu', 'Rejoin', function()
                    TeleportPlace(game.PlaceId, game.JobId)
                end)

            end

            local ConfigSection = Menu.Container('Configuration', 'Configs', 'Right') do
                Menu.TextBox('Configuration', 'Configs', 'Config Name', '')

                Menu.ListBox('Configuration', 'Configs', 'Config List', false, {}, function()

                end)

                Menu.Button('Configuration', 'Configs', 'Create', function()
                    
                end)

                Menu.Button('Configuration', 'Configs', 'Save', function()
                    
                end)

                Menu.Button('Configuration', 'Configs', 'Load', function()
                    
                end)
            end
            
        end
    end

  local function UpdateIndicators()

    --Menu.Keybinds.List['Enabled']:Update(Settings['Main']['Enabled'] and "On" or "Off")

    if enabled and Target then
        Menu.Indicators.List['Target']:Update(Target.Name)

        Menu.Indicators.List['Target Health']:SetVisible(true)
        Menu.Indicators.List['Target Armor']:SetVisible(true)

        Menu.Indicators.List['Knocked Out']:SetVisible(true)
        Menu.Indicators.List['Anti Aiming']:SetVisible(true)
    else
        Menu.Indicators.List['Target']:Update('nil')
        Menu.Indicators.List['Target Health']:SetVisible(false)
        Menu.Indicators.List['Target Armor']:SetVisible(false)

        Menu.Indicators.List['Knocked Out']:SetVisible(false)
        Menu.Indicators.List['Anti Aiming']:SetVisible(false)

        Menu.Indicators.List['Target Ammo']:SetVisible(false)
    end

    if enabled and Target then
        local Character = Target.Character

        if Character then
            local RootPart = Character and Character:FindFirstChild('HumanoidRootPart')
            local Humanoid = Character and Character:FindFirstChild('Humanoid')

            local BodyEffects = Character and Character:FindFirstChild('BodyEffects')
            local Armor = BodyEffects and BodyEffects:FindFirstChild('Armor')
            local KnockedOut = BodyEffects and BodyEffects:FindFirstChild('K.O')

            Menu.Indicators.List['Target Health']:Update(math.floor(Humanoid.Health), 0, 100)
            Menu.Indicators.List['Target Armor']:Update(Armor.Value, 0, 200)

            if KnockedOut and KnockedOut.Value then
                Menu.Indicators.List['Knocked Out']:Update('[True]')
            else
                Menu.Indicators.List['Knocked Out']:Update('[False]')
            end

            if RootPart and (RootPart.AssemblyLinearVelocity.X > 40 or RootPart.AssemblyLinearVelocity.Y > 40 or RootPart.AssemblyLinearVelocity.Z > 40 or RootPart.AssemblyLinearVelocity.X < -40 or RootPart.AssemblyLinearVelocity.Y < -40 or RootPart.AssemblyLinearVelocity.Z < -40) then
                Menu.Indicators.List['Anti Aiming']:Update('[True]')
            else
                Menu.Indicators.List['Anti Aiming']:Update('[False]')
            end

            for i, v in pairs(Character:GetChildren()) do
                if v:IsA('Tool') and (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then
                    Menu.Indicators.List['Target Ammo']:SetVisible(true)

                    local Ammo = v.Ammo.Value
                    local MaxAmmo = v.MaxAmmo.Value

                    task.wait()
                    Menu.Indicators.List['Target Ammo']:Update(Ammo, 0, MaxAmmo)
                else
                    Menu.Indicators.List['Target Ammo']:SetVisible(false)
                end
            end

        end

    end
end
  
  
  ---------------------------------------------------------------------------------- scripts
  
  do --// notification library
    do --// Notifications 
        local NotificationContainer = Instance.new("ScreenGui", gethui());
        do  --// Functions
            function Notifications:UpdateNotifications()
                local i = 0
                for v in next, Notifications do
                    if v.Holder then
                        local tween = Utility:Tween(v.Holder, TweenInfo.new(0.8, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(0, 20, 0, 75 + (i * 25))})
                        i = i + 1
                    end
                end
            end;
  
            function Notifications:UpdateNotifications2(Item)
                for i,v in pairs(Item) do
                    if typeof(v) == "Instance" then
                        task.spawn(function()
                            local tween = Utility:Tween(v, TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
  
                            tween.Completed:Connect(function()
                                if v.Name == "Holder" then
                                    v:Destroy();
                                end
                            end)
                        end);
                        if v.ClassName == "TextLabel" then
                            local tween = Utility:Tween(v, TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {TextTransparency = 1})
                        end
                    end
                end
            end
  
            function Notifications:New(Text, Time, Color)
                Time = Time or 2;
                Color = Color or Color3.fromRGB(100, 95, 192);
                Text = Text or "No text provided? retard? "..tostring(math.random());
  
                local Notification = {};
  
                local Holder = Instance.new("Frame")
                Holder.Position = UDim2.new(0, -30, 0, 75);
                Holder.Size = UDim2.new(0, 0, 0, 23);
                Holder.BackgroundTransparency = 0;
                Holder.Parent = NotificationContainer;
                Holder.BackgroundColor3 = Color3.fromRGB(37, 37, 37);
                Holder.BorderSizePixel = 1
                Holder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                Notification.Holder = Holder;
  
                local Background = Instance.new("Frame");
                Background.Parent = Holder;
                Background.Size = UDim2.new(1, -4, 1, -4);
                Background.BackgroundColor3 = Color3.fromRGB(17, 17, 17);
                Background.Position = UDim2.new(0, 2, 0, 2);
                Background.BorderSizePixel = 1
                Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
                Notification.Background = Background;
  
                local AccentBar = Instance.new("Frame");
                AccentBar.Size = UDim2.new(0, 1, 1, 0);
                AccentBar.Parent = Background;
                AccentBar.BackgroundColor3 = Color;
                AccentBar.Position = UDim2.new(0, 0, 0, 0);
                AccentBar.BorderSizePixel = 0
                Notification.AccentBar = AccentBar;
  
                local AccentBar2 = Instance.new("Frame");
                AccentBar2.Size = UDim2.new(0, 0, 0, 1);
                AccentBar2.Position = UDim2.new(0, 0, 0, 15);
                AccentBar2.Parent = Background;
                AccentBar2.BackgroundColor3 = Color;
                AccentBar2.BorderSizePixel = 0
  
                Notification.AccentBar2 = AccentBar2
                local NotifText = Instance.new("TextLabel");
                NotifText.TextXAlignment = Enum.TextXAlignment.Left;
                NotifText.Position = UDim2.new(0, 3, 0, 0);
                NotifText.Size = UDim2.new(1, 0, 1, 0)
                NotifText.Parent = Background;
                NotifText.Font = Enum.Font.Ubuntu;
                NotifText.TextColor3 = Color3.new(1,1,1);
                NotifText.BackgroundTransparency = 1;
                NotifText.TextSize = 12.00;
                NotifText.Text = Text;
  
                Notification.NotifText = NotifText;
                Notification.Holder.Size = UDim2.new(0, NotifText.TextBounds.X + 10, 0, 19);
  
                AccentBar2.Size = UDim2.new(0, 1, 0, 1)
  
                Notifications[Notification] = true
  
                local Connection
                function Notification:Remove()
                    Notifications[Notification] = nil
                    Notifications:UpdateNotifications();
                end;
                task.spawn(function()
                    Notification.Holder.Size = UDim2.new(0, NotifText.TextBounds.X + 10, 0, 19);
                    Notifications:UpdateNotifications()
                    Notification.AccentBar2:TweenSize(UDim2.new(0, Background.AbsoluteSize.X - 1, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, Time, false);
                    task.wait(Time)
  
                    Notifications:UpdateNotifications2(Notification)
                    task.wait(1.2)
                    Notification:Remove()
                end);
            end;
        end;
    end;
  
    do
        function Utility:Tween(...)
            local NewTween = game:GetService("TweenService"):Create(...)
            NewTween:Play();
            return NewTween;
        end;
    end
  end
  
--// Functions
local function GetCalculatedVelocity(Player)
    local Char = Player.Character
    local Root = Char and Char:FindFirstChild('HumanoidRootPart')
    local Velocity = Vector3.new()

    if (Char and Root) then
        local CurrentPos = Root.Position
        local CurrentTime = tick()

        task.wait(0.00350)

        local NewPos = Root.Position
        local NewTime = tick()

        local FinalTime = NewTime - CurrentTime
        Velocity = (NewPos - CurrentPos) / FinalTime
        CurrentPos = NewPos
        CurrentTime = NewPos
    end

    return Velocity
end

local function UpdateBuiltVelocity()
    if Target then
        BuiltVelocity = GetCalculatedVelocity(Target)
    end
end


local VisibleCheck = function (Part, PartDescendant)
    local Character = Client.Character or Client.CharacterAdded.Wait(Client.CharacterAdded)
    local Origin = Camera.CFrame.Position
    local _, OnScreen = Camera.WorldToViewportPoint(Camera, Part.Position)

    if (OnScreen) then
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {Character, Camera}

        local Result = Workspace.Raycast(Workspace, Origin, Part.Position - Origin, raycastParams)

        if (Result) then
            local PartHit = Result.Instance
            local Visible = (not PartHit or Instance.new("Part").IsDescendantOf(PartHit, PartDescendant))

            return Visible
        end
    end
    return false
end

local function GetClosestPlayerFOV()
    local Player = nil
    local Distance = FoVCircle.Radius

    for i, v in pairs(Players:GetPlayers()) do
        if (v == Client) then continue end

        local Character = v.Character
        local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')


        if Settings.Combat.Checks.WallCheck then
            if Camera:WorldToScreenPoint(v.Character[Settings.Combat.TargetLock.HitParts].Position) and VisibleCheck(v.Character[Settings.Combat.TargetLock.HitParts], v.Character) then
                if (Character and RootPart) then
                    local Pos = Workspace.CurrentCamera:WorldToViewportPoint(RootPart.Position)
                    local Mag = (Vector2.new(Pos.x, Pos.y) - UserInputService:GetMouseLocation()).magnitude

                    if (Mag < Distance) then
                        Distance = Mag
                        Player = v
                    end
                end
            end
        else
            if (Character and RootPart) then
                local Pos = Workspace.CurrentCamera:WorldToViewportPoint(RootPart.Position)
                local Mag = (Vector2.new(Pos.x, Pos.y) - UserInputService:GetMouseLocation()).magnitude

                if (Mag < Distance) then
                    Distance = Mag
                    Player = v
                end
            end
        end
    end

    return Player
end

local function KeybindHandler(Index, Texting)

    if not Texting and Index.KeyCode == Settings['Destroy Cheaters'].Keybind then
        DestroyCheaters()
        Notifications:New('CFrame Desync: ' .. tostring(Settings['Destroy Cheaters'].Enabled), 1.5, MainColor)
    end

    if not Texting and Index.KeyCode == Settings.Combat.TargetLock.KeyBind and Settings.Combat.TargetLock.Enabled then
        if Keybind and enabled then
            Keybind = false
            enabled = false
            if Target ~= nil then
                Target = nil
                ENABLEDHIGHTLIGHTCHECK = false
                if Settings.Visuals.Notifications then
                    Notifications:New('Unlocked... haha!', 1.5, MainColor)
                end
                if Settings.Combat.Stuff.Spectate then
                    game.Workspace.CurrentCamera.CameraSubject = Client.Character
                end
            end
        else
            Keybind = true
            enabled = true
            Target  = GetClosestPlayerFOV();
            if Settings.Visuals.Notifications then
                Notifications:New('Target : ' .. tostring(Target), 1.5, MainColor)
            end
            ENABLEDHIGHTLIGHTCHECK = true
            if Settings.Combat.Stuff.Spectate and Target then
                game.Workspace.CurrentCamera.CameraSubject = Target.Character
            end
            task.spawn(function ()
                while enabled do
                    wait()
                    BacktrackPlayer(Target)
                end
            end)
        end
    end
end

local function ChattedAdmin(Chat)
    if Client and Client.Character then
        local PrefixFound = Chat:sub(1, 1) == "$"

        if (PrefixFound) then
            local SplitChat = Chat:split(' ')
            if (SplitChat[1]:lower():find('target')) then 
                enabled = true
                Target = FindPlayer(SplitChat[2])

                if Settings.Visuals.Notifications then
                    Notifications:New('Target : ' .. tostring(Target), 1.5, MainColor)
                end

                ENABLEDHIGHTLIGHTCHECK = true

                if Settings.Combat.Stuff.Spectate and Target then
                    game.Workspace.CurrentCamera.CameraSubject = Target.Character
                end

                task.spawn(function ()
                    while enabled do
                        wait()
                        BacktrackPlayer(Target)
                    end
                end)
                
            elseif (SplitChat[1]:lower():find('goto')) then
                local GotoPlayer = FindPlayer(SplitChat[2])
    
                if (GotoPlayer) then
                    Client.Character.HumanoidRootPart.CFrame = GotoPlayer.Character.HumanoidRootPart.CFrame
                end
            end
        end
    end
end

local function PostSimulation(Delta)
    if Settings['Destroy Cheaters'].Enabled then
        local LocalCharacter = Client.Character
        local LocalRootPart = Client and LocalCharacter:FindFirstChild("HumanoidRootPart")

        if not LocalRootPart then return end

        Desync.ClientLocation = LocalRootPart.CFrame

        if (Desync.cframe) then 
            LocalRootPart.CFrame = Desync.cframe
        end

        RunService.PreRender:Wait()

        LocalRootPart.CFrame = Desync.ClientLocation
        Desync.ClientLocation = nil
    end
end

RunService.PostSimulation:Connect(PostSimulation);

Client.Chatted:Connect(ChattedAdmin)

function UpdateFov() -- connect to heartbeat loop
    FoVCircle.Position = Vector2.new(Mouse.X, Mouse.Y + GetGuiInset(GuiService).Y)
    FoVCircle.Visible = false
end


--// Loops
task.spawn(function() while task.wait() do UpdateBuiltVelocity() end end)


--// Hooking Aimbot --// CREDITS FOR THE HOOK TO CALLS
local AimMetaTable = getrawmetatable(game); makewriteable(AimMetaTable)
local OldMetaTable = AimMetaTable.__namecall; AimMetaTable.__namecall = newcclosure(function(...)
    local Arguments = {...};
    if Settings.Combat.TargetLock.Enabled and getnamecallmethod() == 'FireServer' and Arguments[2] == MousePos and Target and Target.Character then
        local TargetCharacter = Target.Character
        if (Settings.Combat.Checks.Resolver) then
            Arguments[3] = TargetCharacter[Settings.Combat.TargetLock.HitParts].Position + (BuiltVelocity * Vector3.new(Settings.Combat.TargetLock.Prediction, Settings.Combat.TargetLock.Prediction, Settings.Combat.TargetLock.Prediction))
        else
            Arguments[3] = TargetCharacter[Settings.Combat.TargetLock.HitParts].Position + (TargetCharacter[Settings.Combat.TargetLock.HitParts].Velocity * Vector3.new(Settings.Combat.TargetLock.Prediction, Settings.Combat.TargetLock.Prediction, Settings.Combat.TargetLock.Prediction))
        end

        return OldMetaTable(unpack(Arguments))
    end
    return OldMetaTable(...)
end)

local index; index = hookmetamethod(game, '__index', function(Obj, Prop)

    if Prop == 'CFrame' and index(Obj, 'Name') == 'HumanoidRootPart' and index(Obj, 'Parent') == index(Client, 'Character') and Desync.ClientLocation then
        return Desync.ClientLocation
    end

    return index(Obj, Prop)
end)

 
  
        -- FIRE VISUALS 🔥🔥🔥🔥
  
        Script.Drawing.Line = Drawing.new("Line")
        Script.Drawing.Line.From = Vector2.new(0, 0)
        Script.Drawing.Line.To = Vector2.new(0, 0)
        Script.Drawing.Line.Visible = Settings.Combat.Visuals.Line.Visible
        Script.Drawing.Line.Thickness = Settings.Combat.Visuals.Line.Thickness
        Script.Drawing.Line.Color = Settings.Combat.Visuals.Line.Color
        Script.Drawing.Line.Transparency = Settings.Combat.Visuals.Line.Transparency
  
  
  
  
        -- backtrack
        function BacktrackPlayer(player)
            if Settings.Combat.Visuals.BackTrack.Enabled and Settings.Combat.TargetLock.Enabled == true and enabled and Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.Archivable = true
                local Cloned = player.Character:Clone()
                Cloned.Name = "Player Clone"
                for _, v in ipairs(Cloned:GetChildren()) do
                    if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
                        v.CanCollide = false
                        v.Anchored = true
                        v.Material = Settings.Combat.Visuals.BackTrack.Material
                        v.Color = Settings.Combat.Visuals.BackTrack.Color
                        v.Transparency = Settings.Combat.Visuals.BackTrack.Transparency
                    else
                        v:Destroy()
                    end
                end
                if Cloned:FindFirstChild("Head") and Cloned:FindFirstChild("Head"):FindFirstChild("face") then
                    Cloned.Head.face:Destroy()
                end
                Cloned.Parent = game.Workspace
                wait(Settings.Combat.Visuals.BackTrack.Delay)
                Cloned:Destroy()
            end
        end
  
  
        -- look at
  
  
  
    do -- prediction breaker
  
        if getgenv().OldKeyConnection then
            getgenv().OldKeyConnection:Disconnect()
            getgenv().OldKeyConnection = nil
        end
        getgenv().OldKeyConnection =
        UserInputService.InputBegan:Connect(
            function(input, isTyping)
                if input.KeyCode == Settings.Misc.PredictionDisabler.KeyBind and isTyping == false and Settings.Misc.PredictionDisabler.Enabled == true then
                    if Antilockhahga == false then
                        Antilockhahga = true
                        Menu.Keybinds.List['Prediction Breaker']:Update(true and "On" or "Off")
                        if  Settings.Misc.PredictionDisabler.Notifications == true then
                            Notifications:New('Prediction Breaker : TRUE.', 1.5, MainColor)
                        end
                    else
                        Antilockhahga = false
                        Menu.Keybinds.List['Prediction Breaker']:Update(false and "On" or "Off")
                        if  Settings.Misc.PredictionDisabler.Notifications == true then
                            Notifications:New('Prediction Breaker : FALSE.', 1.5, MainColor)
                        end
                    end
                end
            end
        )
        if getgenv().OldStepConnection then
            getgenv().OldStepConnection:Disconnect()
            getgenv().OldStepConnection = nil
        end
        getgenv().OldStepConnection = RunService.Stepped:Connect(function(_, Delta)
                local success, err = pcall(function()
                        if Settings.Misc.PredictionDisabler.Enabled ~= true then
                        else
                        local char = game.Players.LocalPlayer.Character
                        if char and char:FindFirstChildOfClass("Humanoid") and char:FindFirstChildOfClass("Humanoid").RootPart and Antilockhahga == true then
                            local hum = char:FindFirstChildOfClass("Humanoid")
                            if Settings.Misc.PredictionDisabler.AutoWalkSpeed then
                                Settings.Misc.PredictionDisabler.WalkSpeed = hum.WalkSpeed
                            end
                            local root = hum.RootPart
                            root.Velocity = Vector3.new(hum.MoveDirection.x, root.Velocity.y, hum.MoveDirection.z)
                            root.CFrame = root.CFrame + ((hum.MoveDirection * Delta) * (Settings.Misc.PredictionDisabler.WalkSpeed * 0.9))
                            for _, Anim in next, hum:GetPlayingAnimationTracks() do
                                local Anim3 = nil
                                local Anim2 = Anim
                                if Anim and Anim.Animation and Anim.Animation.Parent then
                                    Anim3 = Anim.Animation.Parent
                                end
                                if
                                    Anim3 and Anim3.Parent and Anim3.Parent.Name == "Animate" and
                                        (string.find(Anim2.Animation.Name:lower(), "run") or
                                            string.find(Anim2.Animation.Name:lower(), "walk"))
                                then
                                    Anim2:AdjustSpeed(Settings.Misc.PredictionDisabler.WalkSpeed / Settings.Misc.PredictionDisabler.AnimationSpeed)
                                end
                            end
                        end
                    end
                    end
                )
                if err and Settings.Misc.PredictionDisabler.Errors and Settings.Misc.PredictionDisabler.Notifications then
  
                    Notifications:New('Current AntiLock Speed: <b>' .. tostring(Settings.Misc.PredictionDisabler.WalkSpeed) .. '</b>', 1.5, MainColor)
  
                    Antilockhahga = false
  
  
                    if getgenv().OldStepConnection then
                        getgenv().OldStepConnection:Disconnect()
                        getgenv().OldStepConnection = nil
                    end
  
                    if getgenv().OldKeyConnection then
                        getgenv().OldKeyConnection:Disconnect()
                        getgenv().OldKeyConnection = nil
                    end
                end
            end
        )
  
    end
  
    local function GetRandomCFrame(Boolean, Min, Max)
      if Boolean then
          return CFrame.new(math.random(Min, Max), math.random(0, 5), math.random(Min, Max))
      else
          return CFrame.new(-math.random(Min, Max), math.random(0, 5), -math.random(Min, Max))
      end
  end

  function Utility:GetPlayers()
    return Players:GetPlayers()
  end

  function TeleportPlace(PlaceId, JobId)
    if JobId == game.JobId and #Utility:GetPlayers() <= 1 then
        Client:Kick("Misery: Current Server has 0 players, Rejoining.")
        --
        Wait()
        --
        TeleportService:Teleport(PlaceId, Client)
    else
        TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Client)
    end
end
  
  local function VisualzeMovement()
      local Character = Client and (Client.Character or Client.CharacterAdded:Wait())
      local RootPart = Character and Character.HumanoidRootPart
  
      local Ball = Instance.new('Part') do
          Ball.Anchored = true
          Ball.Size = Vector3.new(0.5, 0.5, 0.5)
          Ball.Shape = Enum.PartType.Ball
          Ball.Color = MainColor
          Ball.Material = Enum.Material.ForceField
          Ball.Parent = Workspace
          Ball.CFrame = RootPart.CFrame
          Ball.CanCollide = false
      end;
  
      Debris:AddItem(Ball, 2)
  end
  
  do-- // Target Strafe
      angle_Y = 0
      
      RunService.Stepped:Connect(function (param,FPS)
          local Random = math.random(1, 6)
          local Gun = GetTool()
  
          if enabled and Gun and Target and Target.Character and Settings.Misc.TargetStrafe.Enabled == true and Settings.Misc.TargetStrafe.Method == 'Strafe' then
              if Settings.Misc.TargetStrafe.Visualize_Circle then
                  nigganiggaXD.CFrame = Target.Character.HumanoidRootPart.CFrame
  
                  spawn(function()
                      nigganiggaXD.Size = Vector3.new(Settings.Misc.TargetStrafe.Distance * 0.7, 0.01, Settings.Misc.TargetStrafe.Distance * 0.7)
                      nigganiggaXD.Color = Settings.Misc.TargetStrafe.Color
                  end)
                  
                  spawn(function ()
                      if Settings.Misc.TargetStrafe.Visualize_Circle == false or Settings.Misc.TargetStrafe.Enabled == false then
                          nigganiggaXD.CFrame = CFrame.new(0,9999,0)
                      end
                  end)
  
              end
          else
              nigganiggaXD.CFrame = CFrame.new(0,9999,0)
          end
  
          if Gun and Settings.Misc.TargetStrafe.Enabled and Settings.Misc.TargetStrafe.Method == 'Strafe' then
            if (Target.Character.HumanoidRootPart.CFrame.x > 5000 or Target.Character.HumanoidRootPart.CFrame.y > 5000 or Target.Character.HumanoidRootPart.CFrame.z > 5000 or Target.Character.HumanoidRootPart.CFrame.x < -5000 or Target.Character.HumanoidRootPart.CFrame.y < -5000 or Target.Character.HumanoidRootPart.CFrame.z < -5000) then return end 

              if enabled then
                  if Settings.Combat.Stuff.LookAt == true then
                      Settings.Combat.Stuff.LookAt = false
                      wait()
                      Settings.Combat.Stuff.LookAt = true
                  end
  
                  angle_Y = angle_Y + FPS / Settings.Misc.TargetStrafe.Speed % 1
                  Client.Character.HumanoidRootPart.CFrame = CFrame.new(Target.Character.HumanoidRootPart.Position) * CFrame.Angles(0, 2 * math.pi * angle_Y, 0) * CFrame.new(0, Settings.Misc.TargetStrafe.Height, Settings.Misc.TargetStrafe.Distance)
              end
          elseif Gun and Settings.Misc.TargetStrafe.Enabled and Settings.Misc.TargetStrafe.Method == 'Randomize' and enabled then
            if (Target.Character.HumanoidRootPart.CFrame.x > 5000 or Target.Character.HumanoidRootPart.CFrame.y > 5000 or Target.Character.HumanoidRootPart.CFrame.z > 5000 or Target.Character.HumanoidRootPart.CFrame.x < -5000 or Target.Character.HumanoidRootPart.CFrame.y < -5000 or Target.Character.HumanoidRootPart.CFrame.z < -5000) then return end 

              if Random <= 3 then
                  Client.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame * GetRandomCFrame(true, Settings.Misc.TargetStrafe.RandomizeMin, Settings.Misc.TargetStrafe.RandomizeMax)
                  if Settings.Misc.TargetStrafe.Visualize_Circle then
                      VisualzeMovement()
                  end
              elseif Random > 3 then
                  Client.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame * GetRandomCFrame(false, Settings.Misc.TargetStrafe.RandomizeMin, Settings.Misc.TargetStrafe.RandomizeMax)
                  if Settings.Misc.TargetStrafe.Visualize_Circle then
                      VisualzeMovement()
                  end
              end
  
          end
      end)
  end

  local function Reload(Object)
    local KOValue = Client.Character:WaitForChild('BodyEffects')['K.O'].Value

    if Object and KOValue ~= true then
        ReplicatedStorage:FindFirstChild('MainEvent'):FireServer('Reload', Object)
    end
end


  task.spawn(function()
    while task.wait(0.07) do

        if (enabled and Target and Target.Character and Settings.Misc.TargetStrafe.Enabled and Settings.Misc.TargetStrafe.AutoFire) then 

            local Gun = GetTool()
            if (Gun and Target) then 
                Gun:Activate()
            end
        end

        if (enabled and Target and Target.Character and Settings.Misc.TargetStrafe.Enabled and Settings.Misc.TargetStrafe.AutoReload) then

            local Gun = GetTool()
            if (Gun and Gun.Ammo.Value == 0) then
                Reload(Gun)
            end
        end
        
    end
  end)
  
    do -- walkspeed Cframe
        UserInputService.InputBegan:Connect(function(input, isTyping)
            if not isTyping and input.KeyCode == Settings.Misc.WalkSpeed.KeyBind and Settings.Misc.WalkSpeed.Enabled == true then
                if CFrameSpeedKeyBind then
                    CFrameSpeedKeyBind = false
                    Menu.Keybinds.List['CFrame']:Update(false and "On" or "Off")
                    if  Settings.Misc.WalkSpeed.Notifications == true then
                        Notifications:New('WalkSpeed disabled', 1.5, MainColor)
                    end
                else
                    Menu.Keybinds.List['CFrame']:Update(true and "On" or "Off")
                    CFrameSpeedKeyBind = true
                    if  Settings.Misc.WalkSpeed.Notifications == true then
                        Notifications:New('WalkSpeed enabled', 1.5, MainColor)
                    end
                end
            end
        end)
    end
  
    do -- fly
        UserInputService.InputBegan:Connect(function(input, isTyping)
            if not isTyping and input.KeyCode == Settings.Misc.Fly.KeyBind and Settings.Misc.Fly.Enabled then
                if flyvariableshit then
                    flyvariableshit = false
                    Menu.Keybinds.List['Fly']:Update(false and "On" or "Off")
                    if  Settings.Misc.Fly.Notification == true then
                        Notifications:New('fly disabled', 1.5, MainColor)
                    end
                else
                    flyvariableshit = true
                    Menu.Keybinds.List['Fly']:Update(true and "On" or "Off")
                    if  Settings.Misc.Fly.Notification == true then
                        Notifications:New('fly enabled', 1.5, MainColor)
                    end
                end
            end
        end)
    end
  
    do -- trash talk
        local function toggle_script(input, t)
            if not t and input.KeyCode == Settings.Misc.TrashTalk.Use.KeyBind and Settings.Misc.TrashTalk.Use.UsekeyBind then
                if Settings.Misc.TrashTalk.Use.Notification then
                    if not Settings.Misc.TrashTalk.Use.Enabled then
                        Notifications:New('trash talking', 1.5, MainColor)
                        if tick() >= chatSpamTick + 1 then
                            sayMessage(getgenv().MethodBeingUsed[math.random(1, #getgenv().MethodBeingUsed)])
                            chatSpamTick = tick()
                        end
                    else
                        Notifications:New('disabled "enabled" if you want to use', 1.5, MainColor)
                    end
                end
            end;
        end;
  
        UserInputService.InputBegan:Connect(toggle_script);
    end
  
    do -- // Anti Aim
        getgenv().xd = 0
  
        local function toggleScript()
        print("working")
        Settings.Misc.NetworkAnti.Enabled = not Settings.Misc.NetworkAnti.Enabled
            if Settings.Misc.NetworkAnti.Enabled then
                if Settings.Misc.NetworkAnti.Notification then
                    Notifications:New('Network enabled', 1.5, MainColor)
                end
            else
                if Settings.Misc.NetworkAnti.Notification then
                    Notifications:New('Network disabled', 1.5, MainColor)
                end
            end
        end
  
        UserInputService.InputBegan:Connect(function(input, t)
            if not t and input.KeyCode == Settings.Misc.NetworkAnti.Keybind then
                toggleScript()
            end
        end)
  
    task.spawn(function()
        while true do
            task.wait()
            if Settings.Misc.NetworkAnti.Enabled then
                local loop = RunService.Heartbeat:Connect(function()
                    sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", true)
                    task.wait()
                    sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", false)
                end)
                task.wait(getgenv().xd)
                if loop then
                    loop:Disconnect()
                end
            end
        end
    end)
  
    end

  
  local EtherealParts = Instance.new('Folder', workspace)
  EtherealParts.Name  = 'EtherealParts'
  
  local function HitEffect(Player, Type)
      local Character = Player.Character
      local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')
  
      if Character and RootPart then

        if Type == 'Pulse' then
			local Attachment = Instance.new('Attachment', RootPart)
			local Particle1  = Instance.new('ParticleEmitter', Attachment) do
				Particle1.Name          = 'Particle1'
				Particle1.LightEmission = 3
				Particle1.Transparency  = NumberSequence.new(0)
                Particle1.Color         = ColorSequence.new(MainColor)
				Particle1.Size          = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 6, 1.2)}
				Particle1.Rotation      = NumberRange.new(0)
				Particle1.RotSpeed      = NumberRange.new(0)
				Particle1.Enabled       = false
				Particle1.Rate          = 2
				Particle1.Lifetime      = NumberRange.new(0.25)
				Particle1.Speed         = NumberRange.new(0.1)
				Particle1.Squash        = NumberSequence.new(0)
				Particle1.ZOffset       = 1
				Particle1.Texture       = 'rbxassetid://2916153928'
				Particle1.Orientation   = 'VelocityPerpendicular'
				Particle1.Shape         = 'Box'
				Particle1.ShapeInOut    = 'Outward'
				Particle1.ShapeStyle    = 'Volume'
			end
			local Particle2  = Instance.new('ParticleEmitter', Attachment) do
				Particle2.Name          = 'Particle1'
				Particle2.LightEmission = 3
				Particle2.Transparency  = NumberSequence.new(0)
                Particle2.Color         = ColorSequence.new(MainColor)
				Particle2.Size          = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 6, 1.2)}
				Particle2.Rotation      = NumberRange.new(0)
				Particle2.RotSpeed      = NumberRange.new(0)
				Particle2.Enabled       = false
				Particle2.Rate          = 2
				Particle2.Lifetime      = NumberRange.new(0.25)
				Particle2.Speed         = NumberRange.new(0.1)
				Particle2.Squash        = NumberSequence.new(0)
				Particle2.ZOffset       = 1
				Particle2.Texture       = 'rbxassetid://2916153928'
				Particle2.Orientation   = 'FacingCamera'
				Particle2.Shape         = 'Box'
				Particle2.ShapeInOut    = 'Outward'
				Particle2.ShapeStyle    = 'Volume'
			end

			Particle1:Emit(1);
			Particle2:Emit(1);

			Debris:AddItem(Attachment, 1)
        elseif Type == 'Clone' then
  
              Character.Archivable  = true
  
              local Clone = Character:Clone()
              Clone.Parent = EtherealParts
              Clone.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
  
              for _, v in pairs(Clone:GetDescendants()) do
                  if (v:IsA('BasePart')) then
                      v.Material = Enum.Material.ForceField
                      v.Color = MainColor
                      v.CanCollide = false
                      v.Anchored = true
                      v.CanQuery = false
                      v.CanTouch = false
                  end
  
                  if (v:IsA('Accessory') or v:IsA('Tool')) then
                      v:Destroy()
                  end
              end
  
              for i,v in pairs(Character:GetDescendants()) do
                  if (v:IsA('BasePart')) then
                      local ClonePart = Clone:FindFirstChild(v.Name)
  
                      if (ClonePart) then
                          ClonePart.CFrame = v.CFrame
                      end
                  end
              end
  
              Clone:PivotTo(Character.PrimaryPart.CFrame + Vector3.new(Client.Character.HumanoidRootPart.CFrame.lookVector.x * 1.5, 0, Client.Character.HumanoidRootPart.CFrame.lookVector.z * 1.5))
  
              CharacterArchivable = false
              Debris:AddItem(Clone, 2)
  
          end
      end
  end
  
  local function FindTargetOnPart(Part)
      local Target = nil;
      local HitPart = nil;
      local Distance = 2;
  
      for _, Player in pairs(Players:GetPlayers()) do
          if (Player == Client) then continue end
  
          local Char = Player.Character
          local Root = Char and Char:FindFirstChild('HumanoidRootPart')
  
          for _, Obj in pairs(Char:GetChildren()) do
              if (not Obj:IsA('BasePart')) then continue end
  
              local Mag = (Obj.Position - Part.Position).magnitude
              if (Mag < Distance) then
                  Distance = Mag
                  Target = Player
                  HitPart = Obj
              end
          end
      end
  
      return Target, HitPart
  end
  
  local function SirenAdded(Obj)
      local Character = Client.Character
      local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')
  
      local function VerifyBullet(obj)
          return (obj.Name == 'BULLET_RAYS' or obj.Name:lower():find('bullet') or obj:WaitForChild('Attachment', 1) or obj:WaitForChild('GunBeam', 1)) and obj
      end 
  
      local PlayerChecks = {
          PlayerGun = false
      }
  
      local BulletRay = VerifyBullet(Obj)
      if (BulletRay and RootPart) then
          local Mag = (RootPart.Position - BulletRay.Position).magnitude
          local MagCheck = nil;
          if (Settings.Visuals.Hit_Detection.Enabled) then
              MagCheck = 13
          else
              MagCheck = 13
          end
  
          if (Mag <= MagCheck) then
              PlayerChecks.PlayerGun = true
          end
  
          if (PlayerChecks.PlayerGun) then -- Shot from client
              local GunBeam = BulletRay:WaitForChild('GunBeam', 1)
              local Attachment0 = GunBeam.Attachment0 -- closest to player
              local Attachment1 = GunBeam.Attachment1 -- mousepos 
  
              if Settings.Visuals.Bullet_Trails.Enabled then
                  task.wait()
                  GunBeam.Texture        = AssetTable.Textures[Settings.Visuals.Bullet_Trails.Texture]
                  GunBeam.LightEmission  = 5
                  GunBeam.Segments       = 10
                  GunBeam.LightInfluence = 0
                  GunBeam.TextureSpeed   = Settings.Visuals.Bullet_Trails.Speed
                  GunBeam.Brightness     = Settings.Visuals.Bullet_Trails.Brightness
                  GunBeam.Color          = Settings.Visuals.Bullet_Trails.Color
                  GunBeam.Width0         = Settings.Visuals.Bullet_Trails.Width
                  GunBeam.Width1         = Settings.Visuals.Bullet_Trails.Width
                  GunBeam.Transparency   = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 0)})
              end
  
              if Settings.Visuals.Hit_Detection.Enabled then
                  local Part = Instance.new('Part', Workspace); do
                      Part.Anchored = true
                      Part.Size = Vector3.new(0.25, 0.25, 0.25)
                      Part.Position = Attachment1.WorldCFrame.Position
                      Part.Material = Enum.Material.Neon
                      Part.Color = MainColor
                      Part.CanCollide = false
                      Part.Transparency = 1
                  end
  
                  Debris:AddItem(Part, 2)
  
                  local Target, HitPart = FindTargetOnPart(Part)
                  if (Target ~= nil) then
  
                      if Settings.Visuals.Hit_Detection.Notify then
                          Menu.Notify('Misery<font color="#' .. tostring(MainColor:ToHex()) .. '">.cc</font>  >  ' .. '+1 Hit | ' .. tostring(HitPart) .. ' | Target : ' .. Target.DisplayName .. '', 1.5)
                      end
  
                      if Settings.Visuals.Hit_Detection.Clone then
                          HitEffect(Target, 'Clone')
                      end

                      if Settings.Visuals.Hit_Detection.Pulse then
                        HitEffect(Target, 'Pulse')
                    end
  
                      if Settings.Visuals.Hit_Detection.Sound then
                          local Sound = Instance.new('Sound', Obj); do
                              Sound.SoundId = AssetTable.Sounds[Settings.Visuals.Hit_Detection.HitSound]
                              Sound.Volume = 1
                              Sound:Play()
                          end
                      end
  
                  end
              end
  
          end
      end
  
  end
  
  -- aim viewer
  do
    AntiAimViewer_Target = Client
    print(AntiAimViewer_Target)
  
  
      function getgun()
        for i, v in pairs(AntiAimViewer_Target.Character:GetChildren()) do
            if v and (v:FindFirstChild("Default") or v:FindFirstChild("Handle")) then
                return v
            end
        end
      end
  
      local a = Instance.new("Beam")
      a.Segments = 1
      a.Width0 = 0.2
      a.Width1 = 0.2
      a.Color = ColorSequence.new(AntiAimViewer_Color)
      a.FaceCamera = true
      local b = Instance.new("Attachment")
      local c = Instance.new("Attachment")
      a.Attachment0 = b
      a.Attachment1 = c
      a.Parent = workspace.Terrain
      b.Parent = workspace.Terrain
      c.Parent = workspace.Terrain
  
      task.spawn(
        function()
            RunService.RenderStepped:Connect(
                function()
                    local character = Client.Character
                    if not character then
                        a.Enabled = false
                        return
                    end
  
                    if
                        AntiAimViewer_Enabled and getgun() and
                            AntiAimViewer_Target.Character:FindFirstChild("BodyEffects") and
                            AntiAimViewer_Target.Character:FindFirstChild("Head") and
                            AntiAimViewer_Target.Character:FindFirstChildWhichIsA("Tool")
                    then
                        a.Enabled = true
                        b.Position = AntiAimViewer_Target.Character:FindFirstChild("Head").Position
                        c.Position = AntiAimViewer_Target.Character.BodyEffects[AntiAimViewer_Method].Value
                        a.Color = ColorSequence.new(AntiAimViewer_Color)
                    else
                        a.Enabled = false
                    end
                end
            )
        end
      )
  
  end
  
  
  
  local HightLightT = Instance.new("Highlight")
  local AimViewerHighLight = Instance.new("Highlight")
  local Framework = Client.PlayerGui:FindFirstChild('Framework')
  
  local newindex; newindex = hookmetamethod(game, '__newindex', LPH_NO_VIRTUALIZE(function(self, key, value)
      local calling_script = getcallingscript()
  
      if (Framework and calling_script == Framework and self:IsA('Camera') and key == 'CFrame' and Settings.Misc.Random.NoRecoil) then 
          return 
      end
  
      if (key == 'WalkSpeed' and value < 16 and Settings.Misc.Random.NoSlow) then 
          value = 16
      end
  
      return newindex(self, key, value)
  end))
  
  local function Heartbeat()

    UpdateFov()

    if Settings.Misc.Random.AntiBag then
        Client.Character["Christmas_Sock"]:Destroy()
    end
    if Settings.Misc.Random.AutoStomp then
        game.ReplicatedStorage.MainEvent:FireServer("Stomp")
    end
    if Settings.Misc.Cash.AutoDrop == true then
        game.ReplicatedStorage.MainEvent:FireServer("DropMoney", Settings.Misc.Cash.Amount)
    end
    if Settings.Misc.Cash.AutoPick == true then
        pcall(
            function()
                for _, v in pairs(Workspace.Ignored.Drop:GetChildren()) do
                    if v.Name == "MoneyDrop" then
                        local MoneyMagnitude =
                            (v.Position - Client.Character.HumanoidRootPart.Position).magnitude
                        if MoneyMagnitude < 25 then
                            fireclickdetector(v.ClickDetector)
                        end
                    end
                end
            end
        )
    end
  
    if ENABLEDHIGHTLIGHTCHECK == true and Settings.Combat.Visuals.HighLight.Enabled == true and Settings.Combat.TargetLock.Enabled == true and Target then
        HightLightT.Parent = Target.Character
        HightLightT.FillColor = Settings.Combat.Visuals.HighLight.FillColor
        HightLightT.OutlineColor = Settings.Combat.Visuals.HighLight.OutLineColor
    else
        HightLightT.Parent = game.CoreGui
    end
  
    if AntiAimViewer_Enabled and AntiAimViewer_HighLight and AntiAimViewer_Target and AntiAimViewer_Target.Character and AntiAimViewer_Target.Character:FindFirstChild("HumanoidRootPart") then
        AimViewerHighLight.Parent = AntiAimViewer_Target.Character
        AimViewerHighLight.FillColor = AntiAimViewer_HighLight_FillColor
        AimViewerHighLight.OutlineColor = AntiAimViewer_HighLight_OutLineColor
    else
        AimViewerHighLight.Parent = game.CoreGui
    end
  
    if Settings.Combat.Visuals.Line.Enabled == true and Settings.Combat.TargetLock.Enabled == true and enabled and Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
        local mousePos = game:GetService("UserInputService"):GetMouseLocation()
        local ClosestPoint = Players[tostring(Target)].Character[Settings.Combat.TargetLock.HitParts]
        local ClosestPoint2D = Camera:WorldToViewportPoint(ClosestPoint.Position)
        Script.Drawing.Line.From = Vector2.new(ClosestPoint2D.X, ClosestPoint2D.Y)
        Script.Drawing.Line.To = Vector2.new(mousePos.X, mousePos.Y)
        Script.Drawing.Line.Visible = Settings.Combat.Visuals.Line.Visible
        Script.Drawing.Line.Thickness = Settings.Combat.Visuals.Line.Thickness
        Script.Drawing.Line.Color = Settings.Combat.Visuals.Line.Color
        Script.Drawing.Line.Transparency = Settings.Combat.Visuals.Line.Transparency
    else
        Script.Drawing.Line.To = Vector2.new(9999, 9999)
        Script.Drawing.Line.From = Vector2.new(9999, 9999)
        Script.Drawing.Line.Visible = Settings.Combat.Visuals.Line.Visible
        Script.Drawing.Line.Thickness = Settings.Combat.Visuals.Line.Thickness
        Script.Drawing.Line.Color = Settings.Combat.Visuals.Line.Color
        Script.Drawing.Line.Transparency = Settings.Combat.Visuals.Line.Transparency
    end
  
  
  
  
    if enabled and Target and Target.Character and Target.Character:FindFirstChild("LowerTorso") and Settings.Combat.Stuff.LookAt then
        Client.Character.HumanoidRootPart.CFrame = CFrame.new(Client.Character.HumanoidRootPart.CFrame.Position, Vector3.new(Target.Character.HumanoidRootPart.CFrame.X, Client.Character.HumanoidRootPart.CFrame.Position.Y, Target.Character.HumanoidRootPart.CFrame.Z))
    end
    if enabled and Target and Target.Character and Target.Character:FindFirstChild("LowerTorso") and Settings.Combat.Checks.Knocked == true then
        local KOd = Target.Character:WaitForChild("BodyEffects")["K.O"].Value
        local Grabbed = Target.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
        if KOd or Grabbed then
            print("knocked")
            ENABLEDHIGHTLIGHTCHECK = false
            enabled = false
            Target = nil
        end
    end
  
    if Settings.Combat.Stuff.AutoPrediction == true then
        pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
        split = string.split(pingvalue,'(')
        ping = tonumber(split[1])
       if ping < 130 then
            Settings.Combat.TargetLock.Prediction = 0.151
       elseif ping < 125 then
            Settings.Combat.TargetLock.Prediction = 0.149
       elseif ping < 110 then
            Settings.Combat.TargetLock.Prediction = 0.146
       elseif ping < 105 then
            Settings.Combat.TargetLock.Prediction = 0.138
       elseif ping < 90 then
            Settings.Combat.TargetLock.Prediction = 0.136
       elseif ping < 80 then
            Settings.Combat.TargetLock.Prediction = 0.134
       elseif ping < 70 then
            Settings.Combat.TargetLock.Prediction = 0.131
       elseif ping < 60 then
            Settings.Combat.TargetLock.Prediction = 0.1229
       elseif ping < 50 then
            Settings.Combat.TargetLock.Prediction = 0.1225
       elseif ping < 40 then
            Settings.Combat.TargetLock.Prediction = 0.1256
       end
   end
  
   if CFrameSpeedKeyBind and Settings.Misc.WalkSpeed.Enabled then
        if Client.Character.Humanoid.MoveDirection.Magnitude > 0 then
            for i = 1, Settings.Misc.WalkSpeed.Speed do
                Client.Character:TranslateBy(Client.Character.Humanoid.MoveDirection)
            end
        end
    end
  
    if Settings.Misc.Fly.Enabled and flyvariableshit then
        spawn(function()
            pcall(function()
                local speed = Settings.Misc.Fly.Speed
                local velocity = Vector3.new(0, 1, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * -speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * -speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * speed)
                end
  
                Client.Character.HumanoidRootPart.Velocity = velocity
                Client.Character.Humanoid:ChangeState("Freefall")
            end)
        end)
    else
        Client.Character.Humanoid:ChangeState("Landing")
    end
  
    if Settings.Misc.TrashTalk.Use.Enabled == true then
        if tick() >= chatSpamTick + 1 then
            sayMessage(getgenv().MethodBeingUsed[math.random(1, #getgenv().MethodBeingUsed)])
            chatSpamTick = tick()
        end
    end
  
  end
  
  
  --\\ Initialize Function
  local function Initialize()
    Menu.Watermark:SetVisible(true)
    Menu:SetTab("Main")
    Menu:SetVisible(true)
    Menu:Init()
    UserInputService.InputBegan:Connect(KeybindHandler)
    RunService.Heartbeat:Connect(Heartbeat)
    Workspace.Ignored.Siren.DescendantAdded:Connect(SirenAdded)
    ContextAction:BindAction('menuToggle', MenuToggle, false, Settings.Configs.Menu.Keybind)
  end
  do Initialize() end
  
  game:GetService("RunService").RenderStepped:Connect(function()

    local Character = Client and (Client.Character or Client.CharacterAdded:Wait())
    local Gun = GetTool(Gun)

    if Settings.Combat.Visuals.Line.Circle and Target and Target.Character then
        TargetCircle.Visible  = true
        TargetCircle.Position = Target.Character.UpperTorso and Target.Character.UpperTorso.Position
        TargetCircle.Color    = MainColor
        TargetCircle.Radius   = 2
        TargetCircle.Sides    = 2
    else
        TargetCircle.Visible  = false
    end
    
    if Settings.Visuals.Character_Chams.Enabled and Character then
        for i, v in pairs(Character:GetDescendants()) do
            if (v.Parent:IsA('Tool') and (v:IsA('MeshPart') or v:IsA('BasePart'))) then continue end 

            if v:IsA('MeshPart') then
                v.Material = Settings.Visuals.Character_Chams.Material
                v.Color = Settings.Visuals.Character_Chams.Color
                v.TextureID = ''
            end

            if v:IsA('BasePart') then
                v.Material = Settings.Visuals.Character_Chams.Material
                v.Color = Settings.Visuals.Character_Chams.Color
            end
        end
    end

    if Settings.Visuals.Weapon_Chams.Enabled and Character and Gun then
        for i, v in pairs(Gun:GetChildren()) do

            if v:IsA('MeshPart') then
                v.Material = Settings.Visuals.Weapon_Chams.Material
                v.Color = Settings.Visuals.Weapon_Chams.Color
                v.TextureID = ''
            end

            if v:IsA('BasePart') then
                v.Material = Settings.Visuals.Weapon_Chams.Material
                v.Color = Settings.Visuals.Weapon_Chams.Color
            end

        end
    end

    local Bars = Client.PlayerGui:FindFirstChild('MainScreenGui') and Client.PlayerGui.MainScreenGui:FindFirstChild('Bar')

    if (Bars) then 
        if Settings.Visuals.World_Customization.Bars then
            Bars.Energy.bar.BackgroundColor3 = Settings.Visuals.World_Customization.BarsColor
            Bars.Armor.bar.BackgroundColor3 = Settings.Visuals.World_Customization.BarsColor
            Bars.HP.bar.BackgroundColor3 = Settings.Visuals.World_Customization.BarsColor
            Bars.Armor.firebar.BackgroundColor3 = Settings.Visuals.World_Customization.BarsColor
        elseif not Settings.Visuals.World_Customization.Bars then
            Bars.Energy.bar.BackgroundColor3 = Color3.fromRGB(182, 182, 9)
            Bars.Armor.bar.BackgroundColor3 = Color3.fromRGB(0, 136, 194)
            Bars.HP.bar.BackgroundColor3 = Color3.fromRGB(36, 182, 3)
            Bars.Armor.firebar.BackgroundColor3 = Color3.fromRGB(253, 121, 33)
        end
    end

    UpdateIndicators()

    cam = workspace.CurrentCamera
end)

for i, v in next, (Players:GetChildren()) do
    if (v == Client) then continue end 
    
    local player = getgenv().esp.NewPlayer(v)
end

Players.PlayerAdded:Connect(function(v)
    local player = getgenv().esp.NewPlayer(v)
end)
   end,
})

local Button = MainTab:CreateButton({
   Name = "nyula",
   Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/nyulachan/nyula/main/nyulauh"))();
   end,
})

local Button = MainTab:CreateButton({
   Name = "swagmode",
   Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/lerkermer/lua-projects/master/SwagModeV002'))()
   end,
})

local Button = MainTab:CreateButton({
   Name = "control script",
   Callback = function()
        getgenv().Settings = {
    ["sigma"] = "https://discord.gg/gDuYQ4DhaR",
    ["Effects"] = true, -- portal etc (CLIENTSIDED!)
    ["CustomFunctions"] = "" -- can ignore
}
loadstring(game:HttpGet("https://please-suck.me/p/raw/7naxt0bcok"))()
   end,
})

local Button = MainTab:CreateButton({
   Name = "chat bypasser",
   Callback = function()
        --[[

    _    _                _____                _   _             
    | |  | |              / ____|              | | (_)            
    | |  | |___  ___ _ __| |     _ __ ___  __ _| |_ _  ___  _ __  
    | |  | / __|/ _ \ '__| |    | '__/ _ \/ _` | __| |/ _ \| '_ \ 
    | |__| \__ \  __/ |  | |____| | |  __/ (_| | |_| | (_) | | | |
     \____/|___/\___|_|   \_____|_|  \___|\__,_|\__|_|\___/|_| |_|
                                                                
                         --- by @.closet ---
                  --- https://discord.gg/usercreation ---                                                    
--]]

loadstring(game:HttpGet("https://raw.githubusercontent.com/1price/usercreation/main/UserCreation.lua", true))()
   end,
})

local Button = MainTab:CreateButton({
   Name = "Fly x",
   Callback = function()
        local plr = game.Players.LocalPlayer
local mouse = plr:GetMouse()

localplayer = plr

if workspace:FindFirstChild("Core") then
workspace.Core:Destroy()
end

local Core = Instance.new("Part")
Core.Name = "Core"
Core.Size = Vector3.new(0.05, 0.05, 0.05)

spawn(function()
Core.Parent = workspace
local Weld = Instance.new("Weld", Core)
Weld.Part0 = Core
Weld.Part1 = localplayer.Character.LowerTorso
Weld.C0 = CFrame.new(0, 0, 0)
end)

workspace:WaitForChild("Core")

local torso = workspace.Core
flying = true
local speed=10
local keys={a=false,d=false,w=false,s=false}
local e1
local e2
local function start()
local pos = Instance.new("BodyPosition",torso)
local gyro = Instance.new("BodyGyro",torso)
pos.Name="EPIXPOS"
pos.maxForce = Vector3.new(math.huge, math.huge, math.huge)
pos.position = torso.Position
gyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
gyro.cframe = torso.CFrame
repeat
wait()
localplayer.Character.Humanoid.PlatformStand=true
local new=gyro.cframe - gyro.cframe.p + pos.position
if not keys.w and not keys.s and not keys.a and not keys.d then
speed=5
end
if keys.w then
new = new + workspace.CurrentCamera.CoordinateFrame.lookVector * speed
speed=speed+0
end
if keys.s then
new = new - workspace.CurrentCamera.CoordinateFrame.lookVector * speed
speed=speed+0
end
if keys.d then
new = new * CFrame.new(speed,0,0)
speed=speed+0
end
if keys.a then
new = new * CFrame.new(-speed,0,0)
speed=speed+0
end
if speed>10 then
speed=5
end
pos.position=new.p
if keys.w then
gyro.cframe = workspace.CurrentCamera.CoordinateFrame*CFrame.Angles(-math.rad(speed*0),0,0)
elseif keys.s then
gyro.cframe = workspace.CurrentCamera.CoordinateFrame*CFrame.Angles(math.rad(speed*0),0,0)
else
gyro.cframe = workspace.CurrentCamera.CoordinateFrame
end
until flying == false
if gyro then gyro:Destroy() end
if pos then pos:Destroy() end
flying=false
localplayer.Character.Humanoid.PlatformStand=false
speed=100
end
e1=mouse.KeyDown:connect(function(key)
if not torso or not torso.Parent then flying=false e1:disconnect() e2:disconnect() return end
if key=="w" then
keys.w=true
elseif key=="s" then
keys.s=true
elseif key=="a" then
keys.a=true
elseif key=="d" then
keys.d=true
elseif key=="x" then
if flying==true then
flying=false
else
flying=true
start()
end
end
end)
e2=mouse.KeyUp:connect(function(key)
if key=="w" then
keys.w=false
elseif key=="s" then
keys.s=false
elseif key=="a" then
keys.a=false
elseif key=="d" then
keys.d=false
end
end)
start()
   end,
})

local Button = MainTab:CreateButton({
   Name = "infinite yield fe",
   Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/ttwizz/infiniteyield/master/source.lua", true))()
   end,
})

local Button = MainTab:CreateButton({
   Name = "Eclipse hub",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Ethanoj1/EclipseMM2/master/Script", true))()
   end,
})
